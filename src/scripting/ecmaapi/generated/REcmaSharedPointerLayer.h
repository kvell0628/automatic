// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #ifndef RECMASHAREDPOINTERLAYER_H
        #define RECMASHAREDPOINTERLAYER_H

        #include "ecmaapi_global.h"

        #include <QScriptEngine>
        #include <QScriptValue>
        #include <QScriptContextInfo>
        #include <QDebug>

        
                #include "RLayer.h"
            
            typedef QSharedPointer<RLayer> RLayerPointer;
        

        /**
         * \ingroup scripting_ecmaapi
         */
        class
        
        QCADECMAAPI_EXPORT
        REcmaSharedPointerLayer {

        public:
      static  void initEcma(QScriptEngine& engine, QScriptValue* proto 
    =NULL
    ) 
    ;static  QScriptValue createEcma(QScriptContext* context, QScriptEngine* engine) 
    ;

    // conversion functions for base classes:
    static  QScriptValue getRObject(QScriptContext *context,
            QScriptEngine *engine)
        ;

    // returns class name:
    static  QScriptValue getClassName(QScriptContext *context, QScriptEngine *engine) 
        ;

    // returns all base classes (in case of multiple inheritance):
    static  QScriptValue getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        ;

    // properties:
    

    // public methods:
    static  QScriptValue
        init
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getType
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        clone
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getParentLayerId
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getName
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setName
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        isOffOrFrozen
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        isOff
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setOff
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        isFrozen
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setFrozen
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        isLocked
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setLocked
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        isCollapsed
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setCollapsed
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        isPlottable
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setPlottable
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        isSnappable
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setSnappable
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        isOffIsFreeze
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setOffIsFreeze
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getColor
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setColor
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getLinetypeId
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setLinetypeId
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getLineweight
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setLineweight
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getProperty
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setProperty
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        hasChildLayers
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getChildLayerNames
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getParentLayerName
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getShortLayerName
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getLayerNameHierarchy
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        isChildLayerOf
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getHierarchySeparator
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        hasChildLayersStatic
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getChildLayerNamesStatic
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getParentLayerNameStatic
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getShortLayerNameStatic
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getLayerNameHierarchyStatic
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        isChildLayerOfStatic
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        hasProxy
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue toString
    (QScriptContext *context, QScriptEngine *engine)
    ;static  QScriptValue destroy(QScriptContext *context, QScriptEngine *engine)
    ;static RLayer* getSelf(const QString& fName, QScriptContext* context)
    ;static RLayer* getSelfShell(const QString& fName, QScriptContext* context)
    ;static  QScriptValue data
    (QScriptContext *context, QScriptEngine *engine)
    ;static  QScriptValue isNull
    (QScriptContext *context, QScriptEngine *engine)
    ;static  QScriptValue toScriptValueEnumLayerFlag(QScriptEngine* engine, const RLayer::LayerFlag& value)
    ;static  void fromScriptValueEnumLayerFlag(const QScriptValue& value, RLayer::LayerFlag& out)
    ;};
    #endif
    