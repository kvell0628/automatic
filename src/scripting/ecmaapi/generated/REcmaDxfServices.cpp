// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is copyable.
        
        #include "REcmaDxfServices.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
            
        // includes for base ecma wrapper classes
         void REcmaDxfServices::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RDxfServices*) 0)));
        protoCreated = true;
    }

    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    
    // copy:
    REcmaHelper::registerFunction(&engine, proto, copy, "copy");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, reset, "reset");
            
            REcmaHelper::registerFunction(&engine, proto, fixBlockName, "fixBlockName");
            
            REcmaHelper::registerFunction(&engine, proto, fixLayerName, "fixLayerName");
            
            REcmaHelper::registerFunction(&engine, proto, fixFontName, "fixFontName");
            
            REcmaHelper::registerFunction(&engine, proto, fixVersion2String, "fixVersion2String");
            
            REcmaHelper::registerFunction(&engine, proto, fixDimensionLabel, "fixDimensionLabel");
            
            REcmaHelper::registerFunction(&engine, proto, detectVersion2Format, "detectVersion2Format");
            
            REcmaHelper::registerFunction(&engine, proto, hasDIMZIN, "hasDIMZIN");
            
            REcmaHelper::registerFunction(&engine, proto, hasDIMAZIN, "hasDIMAZIN");
            
            REcmaHelper::registerFunction(&engine, proto, hasInvalidEllipse, "hasInvalidEllipse");
            
            REcmaHelper::registerFunction(&engine, proto, getVersion2Compatibility, "getVersion2Compatibility");
            
            REcmaHelper::registerFunction(&engine, proto, getVersion3_1Compatibility, "getVersion3_1Compatibility");
            
            REcmaHelper::registerFunction(&engine, proto, getMajorVersion, "getMajorVersion");
            
            REcmaHelper::registerFunction(&engine, proto, getMinorVersion, "getMinorVersion");
            
            REcmaHelper::registerFunction(&engine, proto, getPatchVersion, "getPatchVersion");
            
            REcmaHelper::registerFunction(&engine, proto, getVersion2LayerName, "getVersion2LayerName");
            
            REcmaHelper::registerFunction(&engine, proto, getVersionBlockName, "getVersionBlockName");
            
            REcmaHelper::registerFunction(&engine, proto, getVersion2Font, "getVersion2Font");
            
            REcmaHelper::registerFunction(&engine, proto, getVersion2DimensionLabel, "getVersion2DimensionLabel");
            
            REcmaHelper::registerFunction(&engine, proto, collectVersion2Info, "collectVersion2Info");
            
            REcmaHelper::registerFunction(&engine, proto, getVersion2PatternAngle, "getVersion2PatternAngle");
            
            REcmaHelper::registerFunction(&engine, proto, getVersion2PatternScale, "getVersion2PatternScale");
            
            REcmaHelper::registerFunction(&engine, proto, getVersion2PatternName, "getVersion2PatternName");
            
            REcmaHelper::registerFunction(&engine, proto, fixVersion2HatchData, "fixVersion2HatchData");
            
            REcmaHelper::registerFunction(&engine, proto, getCodec, "getCodec");
            
            REcmaHelper::registerFunction(&engine, proto, setCodec, "setCodec");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RDxfServices*>(), *proto);

        
                engine.setDefaultPrototype(qMetaTypeId<
                RDxfServices
                > (), *proto);
            
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    
            REcmaHelper::registerFunction(&engine, &ctor, getSafeBlockName, "getSafeBlockName");
            
            REcmaHelper::registerFunction(&engine, &ctor, numberToColor24, "numberToColor24");
            
            REcmaHelper::registerFunction(&engine, &ctor, numberToWeight, "numberToWeight");
            
            REcmaHelper::registerFunction(&engine, &ctor, widthToNumber, "widthToNumber");
            
            REcmaHelper::registerFunction(&engine, &ctor, colorToNumber24, "colorToNumber24");
            
            REcmaHelper::registerFunction(&engine, &ctor, stringToVariable, "stringToVariable");
            
            REcmaHelper::registerFunction(&engine, &ctor, variableToString, "variableToString");
            
            REcmaHelper::registerFunction(&engine, &ctor, getCodeForVariable, "getCodeForVariable");
            
            REcmaHelper::registerFunction(&engine, &ctor, getTypeForVariable, "getTypeForVariable");
            
            REcmaHelper::registerFunction(&engine, &ctor, isVariable2D, "isVariable2D");
            
            REcmaHelper::registerFunction(&engine, &ctor, escapeUnicode, "escapeUnicode");
            
            REcmaHelper::registerFunction(&engine, &ctor, parseUnicode, "parseUnicode");
            
            REcmaHelper::registerFunction(&engine, &ctor, autoFixLinetypePattern, "autoFixLinetypePattern");
            

    // static properties:
    

    // enum values:
    

    ctor.setProperty("Unknown",
    QScriptValue(RDxfServices::Unknown),
    QScriptValue::ReadOnly);


    ctor.setProperty("String",
    QScriptValue(RDxfServices::String),
    QScriptValue::ReadOnly);


    ctor.setProperty("Int",
    QScriptValue(RDxfServices::Int),
    QScriptValue::ReadOnly);


    ctor.setProperty("Float",
    QScriptValue(RDxfServices::Float),
    QScriptValue::ReadOnly);


    ctor.setProperty("Vector",
    QScriptValue(RDxfServices::Vector),
    QScriptValue::ReadOnly);


    // enum conversions:
    
    qScriptRegisterMetaType<RDxfServices::Type>(
        &engine,
        toScriptValueEnumType,
        fromScriptValueEnumType,
        ctor.property(QString::fromLatin1("prototype"))
    );

        
    // init class:
    engine.globalObject().setProperty("RDxfServices",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaDxfServices::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RDxfServices(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RDxfServices
                    cppResult;
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RDxfServices(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
    

    // returns class name:
     QScriptValue REcmaDxfServices::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RDxfServices"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaDxfServices::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaDxfServices::reset
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::reset", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::reset";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("reset", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->reset();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.reset().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::reset", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::getSafeBlockName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::getSafeBlockName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::getSafeBlockName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        RDxfServices::
       getSafeBlockName(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.getSafeBlockName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::getSafeBlockName", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::fixBlockName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::fixBlockName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::fixBlockName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("fixBlockName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->fixBlockName(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.fixBlockName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::fixBlockName", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::fixLayerName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::fixLayerName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::fixLayerName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("fixLayerName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->fixLayerName(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.fixLayerName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::fixLayerName", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::fixFontName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::fixFontName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::fixFontName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("fixFontName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->fixFontName(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.fixFontName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::fixFontName", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::fixVersion2String
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::fixVersion2String", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::fixVersion2String";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("fixVersion2String", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->fixVersion2String(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.fixVersion2String().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::fixVersion2String", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::fixDimensionLabel
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::fixDimensionLabel", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::fixDimensionLabel";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("fixDimensionLabel", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isString()
        ) /* type: QString */
     && (
            context->argument(2).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    QString
                    a1 =
                    (QString)
                    
                    context->argument( 1 ).
                    toString();
                
                    // argument isStandardType
                    QString
                    a2 =
                    (QString)
                    
                    context->argument( 2 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->fixDimensionLabel(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.fixDimensionLabel().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::fixDimensionLabel", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::detectVersion2Format
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::detectVersion2Format", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::detectVersion2Format";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("detectVersion2Format", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->detectVersion2Format(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.detectVersion2Format().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::detectVersion2Format", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::hasDIMZIN
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::hasDIMZIN", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::hasDIMZIN";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("hasDIMZIN", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->hasDIMZIN();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.hasDIMZIN().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::hasDIMZIN", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::hasDIMAZIN
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::hasDIMAZIN", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::hasDIMAZIN";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("hasDIMAZIN", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->hasDIMAZIN();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.hasDIMAZIN().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::hasDIMAZIN", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::hasInvalidEllipse
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::hasInvalidEllipse", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::hasInvalidEllipse";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("hasInvalidEllipse", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->hasInvalidEllipse();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.hasInvalidEllipse().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::hasInvalidEllipse", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::getVersion2Compatibility
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::getVersion2Compatibility", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::getVersion2Compatibility";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("getVersion2Compatibility", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getVersion2Compatibility();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.getVersion2Compatibility().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::getVersion2Compatibility", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::getVersion3_1Compatibility
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::getVersion3_1Compatibility", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::getVersion3_1Compatibility";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("getVersion3_1Compatibility", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getVersion3_1Compatibility();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.getVersion3_1Compatibility().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::getVersion3_1Compatibility", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::getMajorVersion
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::getMajorVersion", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::getMajorVersion";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("getMajorVersion", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getMajorVersion();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.getMajorVersion().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::getMajorVersion", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::getMinorVersion
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::getMinorVersion", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::getMinorVersion";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("getMinorVersion", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getMinorVersion();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.getMinorVersion().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::getMinorVersion", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::getPatchVersion
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::getPatchVersion", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::getPatchVersion";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("getPatchVersion", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getPatchVersion();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.getPatchVersion().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::getPatchVersion", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::getVersion2LayerName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::getVersion2LayerName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::getVersion2LayerName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("getVersion2LayerName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getVersion2LayerName(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.getVersion2LayerName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::getVersion2LayerName", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::getVersionBlockName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::getVersionBlockName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::getVersionBlockName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("getVersionBlockName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getVersionBlockName(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.getVersionBlockName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::getVersionBlockName", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::getVersion2Font
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::getVersion2Font", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::getVersion2Font";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("getVersion2Font", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getVersion2Font(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.getVersion2Font().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::getVersion2Font", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::getVersion2DimensionLabel
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::getVersion2DimensionLabel", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::getVersion2DimensionLabel";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("getVersion2DimensionLabel", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getVersion2DimensionLabel(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.getVersion2DimensionLabel().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::getVersion2DimensionLabel", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::collectVersion2Info
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::collectVersion2Info", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::collectVersion2Info";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("collectVersion2Info", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->collectVersion2Info(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.collectVersion2Info().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::collectVersion2Info", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::getVersion2PatternAngle
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::getVersion2PatternAngle", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::getVersion2PatternAngle";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("getVersion2PatternAngle", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: double */
     && (
            context->argument(1).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    QString
                    a1 =
                    (QString)
                    
                    context->argument( 1 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getVersion2PatternAngle(a0
        ,
    a1);
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.getVersion2PatternAngle().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::getVersion2PatternAngle", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::getVersion2PatternScale
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::getVersion2PatternScale", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::getVersion2PatternScale";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("getVersion2PatternScale", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: double */
     && (
            context->argument(1).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    QString
                    a1 =
                    (QString)
                    
                    context->argument( 1 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getVersion2PatternScale(a0
        ,
    a1);
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.getVersion2PatternScale().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::getVersion2PatternScale", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::getVersion2PatternName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::getVersion2PatternName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::getVersion2PatternName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("getVersion2PatternName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getVersion2PatternName(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.getVersion2PatternName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::getVersion2PatternName", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::fixVersion2HatchData
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::fixVersion2HatchData", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::fixVersion2HatchData";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("fixVersion2HatchData", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    4 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
     && (
            context->argument(2).isNumber()
        ) /* type: double */
     && (
            context->argument(3).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a2 =
                    (double)
                    
                    context->argument( 2 ).
                    toNumber();
                
                    // argument isStandardType
                    bool
                    a3 =
                    (bool)
                    
                    context->argument( 3 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->fixVersion2HatchData(a0
        ,
    a1
        ,
    a2
        ,
    a3);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.fixVersion2HatchData().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::fixVersion2HatchData", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::getCodec
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::getCodec", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::getCodec";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("getCodec", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QTextCodec *'
    QTextCodec * cppResult =
        
               self->getCodec();
        // return type: QTextCodec *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.getCodec().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::getCodec", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::setCodec
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::setCodec", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::setCodec";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RDxfServices* self = 
                        getSelf("setCodec", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QTextCodec * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QTextCodec * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QTextCodec >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RDxfServices: Argument 0 is not of type QTextCodec *QTextCodec *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setCodec(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.setCodec().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::setCodec", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::numberToColor24
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::numberToColor24", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::numberToColor24";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RColor'
    RColor cppResult =
        RDxfServices::
       numberToColor24(a0);
        // return type: RColor
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.numberToColor24().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::numberToColor24", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::numberToWeight
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::numberToWeight", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::numberToWeight";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RLineweight::Lineweight'
    RLineweight::Lineweight cppResult =
        RDxfServices::
       numberToWeight(a0);
        // return type: RLineweight::Lineweight
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.numberToWeight().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::numberToWeight", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::widthToNumber
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::widthToNumber", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::widthToNumber";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RLineweight::Lineweight */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RLineweight::Lineweight
                    a0 =
                    (RLineweight::Lineweight)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        RDxfServices::
       widthToNumber(a0);
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.widthToNumber().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::widthToNumber", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::colorToNumber24
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::colorToNumber24", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::colorToNumber24";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RColor */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RColor*
                    ap0 =
                    qscriptvalue_cast<
                    RColor*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RDxfServices: Argument 0 is not of type RColor.",
                               context);                    
                    }
                    RColor 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        RDxfServices::
       colorToNumber24(a0);
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.colorToNumber24().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::colorToNumber24", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::stringToVariable
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::stringToVariable", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::stringToVariable";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'RS::KnownVariable'
    RS::KnownVariable cppResult =
        RDxfServices::
       stringToVariable(a0);
        // return type: RS::KnownVariable
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.stringToVariable().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::stringToVariable", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::variableToString
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::variableToString", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::variableToString";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        RDxfServices::
       variableToString(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.variableToString().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::variableToString", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::getCodeForVariable
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::getCodeForVariable", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::getCodeForVariable";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        RDxfServices::
       getCodeForVariable(a0);
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.getCodeForVariable().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::getCodeForVariable", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::getTypeForVariable
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::getTypeForVariable", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::getTypeForVariable";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RDxfServices::Type'
    RDxfServices::Type cppResult =
        RDxfServices::
       getTypeForVariable(a0);
        // return type: RDxfServices::Type
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.getTypeForVariable().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::getTypeForVariable", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::isVariable2D
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::isVariable2D", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::isVariable2D";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::KnownVariable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::KnownVariable
                    a0 =
                    (RS::KnownVariable)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RDxfServices::
       isVariable2D(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.isVariable2D().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::isVariable2D", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::escapeUnicode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::escapeUnicode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::escapeUnicode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        RDxfServices::
       escapeUnicode(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.escapeUnicode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::escapeUnicode", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::parseUnicode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::parseUnicode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::parseUnicode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        RDxfServices::
       parseUnicode(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.parseUnicode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::parseUnicode", context, engine);
            return result;
        }
         QScriptValue
        REcmaDxfServices::autoFixLinetypePattern
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaDxfServices::autoFixLinetypePattern", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaDxfServices::autoFixLinetypePattern";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLinetypePattern */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RLinetypePattern*
                    ap0 =
                    qscriptvalue_cast<
                    RLinetypePattern*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RDxfServices: Argument 0 is not of type RLinetypePattern.",
                               context);                    
                    }
                    RLinetypePattern 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RDxfServices::
       autoFixLinetypePattern(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RDxfServices.autoFixLinetypePattern().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaDxfServices::autoFixLinetypePattern", context, engine);
            return result;
        }
         QScriptValue REcmaDxfServices::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RDxfServices* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RDxfServices(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaDxfServices::copy
    (QScriptContext *context, QScriptEngine *engine)
    
    {
        RDxfServices cp = qscriptvalue_cast<RDxfServices>(context->thisObject());
        return qScriptValueFromValue(engine, cp);
    }
     QScriptValue REcmaDxfServices::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RDxfServices* self = getSelf("RDxfServices", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RDxfServices* REcmaDxfServices::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RDxfServices* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RDxfServices >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RDxfServices.%1(): "
                        "This object is not a RDxfServices").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RDxfServices* REcmaDxfServices::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RDxfServices* selfBase = getSelf(fName, context);
                RDxfServices* self = dynamic_cast<RDxfServices*>(selfBase);
                //return REcmaHelper::scriptValueTo<RDxfServices >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RDxfServices.%1(): "
                    "This object is not a RDxfServices").arg(fName),
                    context);
            }

            return self;
            


        }
         QScriptValue REcmaDxfServices::toScriptValueEnumType(QScriptEngine* engine, const RDxfServices::Type& value)
    
        {
            return QScriptValue(engine, (int)value);
        }
         void REcmaDxfServices::fromScriptValueEnumType(const QScriptValue& value, RDxfServices::Type& out)
    
        {
            out = qvariant_cast<RDxfServices::Type>(value.toVariant());
        }
        