// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaAction.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
                #include "RPropertyEvent.h"
            
                #include "RGraphicsScene.h"
            
                #include "RGraphicsView.h"
            
                #include "RDocumentInterface.h"
            
                #include "RCommandEvent.h"
            
                #include "RCoordinateEvent.h"
            
                #include "RDocument.h"
            
                #include "REntityPickEvent.h"
            
                #include "RMouseEvent.h"
            
                #include "RWheelEvent.h"
            
                #include "RGuiAction.h"
            
                #include "RStorage.h"
            
                #include "RTabletEvent.h"
            
                #include "ROperation.h"
            
            
        // includes for base ecma wrapper classes
         void REcmaAction::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RAction*) 0)));
        protoCreated = true;
    }

    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, terminate, "terminate");
            
            REcmaHelper::registerFunction(&engine, proto, isTerminated, "isTerminated");
            
            REcmaHelper::registerFunction(&engine, proto, setOverride, "setOverride");
            
            REcmaHelper::registerFunction(&engine, proto, isOverride, "isOverride");
            
            REcmaHelper::registerFunction(&engine, proto, setNoState, "setNoState");
            
            REcmaHelper::registerFunction(&engine, proto, hasNoState, "hasNoState");
            
            REcmaHelper::registerFunction(&engine, proto, setUniqueGroup, "setUniqueGroup");
            
            REcmaHelper::registerFunction(&engine, proto, getUniqueGroup, "getUniqueGroup");
            
            REcmaHelper::registerFunction(&engine, proto, setOverrideBase, "setOverrideBase");
            
            REcmaHelper::registerFunction(&engine, proto, getOverrideBase, "getOverrideBase");
            
            REcmaHelper::registerFunction(&engine, proto, getGuiAction, "getGuiAction");
            
            REcmaHelper::registerFunction(&engine, proto, setGuiAction, "setGuiAction");
            
            REcmaHelper::registerFunction(&engine, proto, getGraphicsScenes, "getGraphicsScenes");
            
            REcmaHelper::registerFunction(&engine, proto, getDocument, "getDocument");
            
            REcmaHelper::registerFunction(&engine, proto, getDocumentInterface, "getDocumentInterface");
            
            REcmaHelper::registerFunction(&engine, proto, getStorage, "getStorage");
            
            REcmaHelper::registerFunction(&engine, proto, setDocumentInterface, "setDocumentInterface");
            
            REcmaHelper::registerFunction(&engine, proto, setClickMode, "setClickMode");
            
            REcmaHelper::registerFunction(&engine, proto, getClickMode, "getClickMode");
            
            REcmaHelper::registerFunction(&engine, proto, beginEvent, "beginEvent");
            
            REcmaHelper::registerFunction(&engine, proto, setGraphicsView, "setGraphicsView");
            
            REcmaHelper::registerFunction(&engine, proto, finishEvent, "finishEvent");
            
            REcmaHelper::registerFunction(&engine, proto, enterEvent, "enterEvent");
            
            REcmaHelper::registerFunction(&engine, proto, suspendEvent, "suspendEvent");
            
            REcmaHelper::registerFunction(&engine, proto, resumeEvent, "resumeEvent");
            
            REcmaHelper::registerFunction(&engine, proto, escapeEvent, "escapeEvent");
            
            REcmaHelper::registerFunction(&engine, proto, keyPressEvent, "keyPressEvent");
            
            REcmaHelper::registerFunction(&engine, proto, keyReleaseEvent, "keyReleaseEvent");
            
            REcmaHelper::registerFunction(&engine, proto, mousePressEvent, "mousePressEvent");
            
            REcmaHelper::registerFunction(&engine, proto, mouseMoveEvent, "mouseMoveEvent");
            
            REcmaHelper::registerFunction(&engine, proto, mouseReleaseEvent, "mouseReleaseEvent");
            
            REcmaHelper::registerFunction(&engine, proto, mouseDoubleClickEvent, "mouseDoubleClickEvent");
            
            REcmaHelper::registerFunction(&engine, proto, wheelEvent, "wheelEvent");
            
            REcmaHelper::registerFunction(&engine, proto, tabletEvent, "tabletEvent");
            
            REcmaHelper::registerFunction(&engine, proto, swipeGestureEvent, "swipeGestureEvent");
            
            REcmaHelper::registerFunction(&engine, proto, panGestureEvent, "panGestureEvent");
            
            REcmaHelper::registerFunction(&engine, proto, pinchGestureEvent, "pinchGestureEvent");
            
            REcmaHelper::registerFunction(&engine, proto, commandEvent, "commandEvent");
            
            REcmaHelper::registerFunction(&engine, proto, commandEventPreview, "commandEventPreview");
            
            REcmaHelper::registerFunction(&engine, proto, coordinateEvent, "coordinateEvent");
            
            REcmaHelper::registerFunction(&engine, proto, coordinateEventPreview, "coordinateEventPreview");
            
            REcmaHelper::registerFunction(&engine, proto, entityPickEvent, "entityPickEvent");
            
            REcmaHelper::registerFunction(&engine, proto, entityPickEventPreview, "entityPickEventPreview");
            
            REcmaHelper::registerFunction(&engine, proto, propertyChangeEvent, "propertyChangeEvent");
            
            REcmaHelper::registerFunction(&engine, proto, zoomChangeEvent, "zoomChangeEvent");
            
            REcmaHelper::registerFunction(&engine, proto, updatePreview, "updatePreview");
            
            REcmaHelper::registerFunction(&engine, proto, applyOperation, "applyOperation");
            
            REcmaHelper::registerFunction(&engine, proto, snap, "snap");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RAction*>(), *proto);

        
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    

    // static properties:
    

    // enum values:
    

    ctor.setProperty("PickCoordinate",
    QScriptValue(RAction::PickCoordinate),
    QScriptValue::ReadOnly);


    ctor.setProperty("PickCoordinateNoSnap",
    QScriptValue(RAction::PickCoordinateNoSnap),
    QScriptValue::ReadOnly);


    ctor.setProperty("PickEntity",
    QScriptValue(RAction::PickEntity),
    QScriptValue::ReadOnly);


    ctor.setProperty("PickingDisabled",
    QScriptValue(RAction::PickingDisabled),
    QScriptValue::ReadOnly);


    // enum conversions:
    
    qScriptRegisterMetaType<RAction::ClickMode>(
        &engine,
        toScriptValueEnumClickMode,
        fromScriptValueEnumClickMode,
        ctor.property(QString::fromLatin1("prototype"))
    );

        
    // init class:
    engine.globalObject().setProperty("RAction",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaAction::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
           return REcmaHelper::throwError("Abstract class RAction: Cannot be constructed.",
               context); 
    }
    

    // conversion functions for base classes:
    

    // returns class name:
     QScriptValue REcmaAction::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RAction"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaAction::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaAction::terminate
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::terminate", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::terminate";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("terminate", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->terminate();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.terminate().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::terminate", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::isTerminated
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::isTerminated", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::isTerminated";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("isTerminated", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isTerminated();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.isTerminated().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::isTerminated", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::setOverride
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::setOverride", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::setOverride";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("setOverride", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setOverride();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.setOverride().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::setOverride", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::isOverride
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::isOverride", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::isOverride";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("isOverride", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isOverride();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.isOverride().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::isOverride", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::setNoState
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::setNoState", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::setNoState";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("setNoState", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setNoState();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setNoState(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.setNoState().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::setNoState", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::hasNoState
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::hasNoState", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::hasNoState";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("hasNoState", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->hasNoState();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.hasNoState().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::hasNoState", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::setUniqueGroup
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::setUniqueGroup", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::setUniqueGroup";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("setUniqueGroup", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setUniqueGroup(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.setUniqueGroup().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::setUniqueGroup", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::getUniqueGroup
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::getUniqueGroup", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::getUniqueGroup";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("getUniqueGroup", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getUniqueGroup();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.getUniqueGroup().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::getUniqueGroup", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::setOverrideBase
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::setOverrideBase", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::setOverrideBase";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("setOverrideBase", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RAction * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RAction * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RAction >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RAction: Argument 0 is not of type RAction *RAction *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setOverrideBase(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.setOverrideBase().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::setOverrideBase", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::getOverrideBase
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::getOverrideBase", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::getOverrideBase";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("getOverrideBase", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RAction *'
    RAction * cppResult =
        
               self->getOverrideBase();
        // return type: RAction *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.getOverrideBase().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::getOverrideBase", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::getGuiAction
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::getGuiAction", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::getGuiAction";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("getGuiAction", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RGuiAction *'
    RGuiAction * cppResult =
        
               self->getGuiAction();
        // return type: RGuiAction *
                // QObject
                result = engine->newQObject(cppResult, QScriptEngine::QtOwnership);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.getGuiAction().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::getGuiAction", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::setGuiAction
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::setGuiAction", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::setGuiAction";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("setGuiAction", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isQObject()
        ) /* type: RGuiAction * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RGuiAction * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RGuiAction >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RAction: Argument 0 is not of type RGuiAction *RGuiAction *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setGuiAction(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.setGuiAction().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::setGuiAction", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::getGraphicsScenes
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::getGraphicsScenes", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::getGraphicsScenes";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("getGraphicsScenes", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QList < RGraphicsScene * >'
    QList < RGraphicsScene * > cppResult =
        
               self->getGraphicsScenes();
        // return type: QList < RGraphicsScene * >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.getGraphicsScenes().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::getGraphicsScenes", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::getDocument
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::getDocument", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::getDocument";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("getDocument", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RDocument *'
    RDocument * cppResult =
        
               self->getDocument();
        // return type: RDocument *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.getDocument().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::getDocument", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::getDocumentInterface
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::getDocumentInterface", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::getDocumentInterface";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("getDocumentInterface", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RDocumentInterface *'
    RDocumentInterface * cppResult =
        
               self->getDocumentInterface();
        // return type: RDocumentInterface *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.getDocumentInterface().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::getDocumentInterface", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::getStorage
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::getStorage", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::getStorage";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("getStorage", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RStorage *'
    RStorage * cppResult =
        
               self->getStorage();
        // return type: RStorage *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.getStorage().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::getStorage", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::setDocumentInterface
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::setDocumentInterface", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::setDocumentInterface";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("setDocumentInterface", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RAction: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setDocumentInterface(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.setDocumentInterface().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::setDocumentInterface", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::setClickMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::setClickMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::setClickMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("setClickMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RAction::ClickMode */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RAction::ClickMode
                    a0 =
                    (RAction::ClickMode)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setClickMode(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.setClickMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::setClickMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::getClickMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::getClickMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::getClickMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("getClickMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RAction::ClickMode'
    RAction::ClickMode cppResult =
        
               self->getClickMode();
        // return type: RAction::ClickMode
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.getClickMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::getClickMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::beginEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::beginEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::beginEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("beginEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->beginEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.beginEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::beginEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::setGraphicsView
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::setGraphicsView", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::setGraphicsView";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("setGraphicsView", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RGraphicsView * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RGraphicsView * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RGraphicsView >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RAction: Argument 0 is not of type RGraphicsView *RGraphicsView *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setGraphicsView(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.setGraphicsView().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::setGraphicsView", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::finishEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::finishEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::finishEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("finishEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->finishEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.finishEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::finishEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::enterEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::enterEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::enterEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("enterEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->enterEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.enterEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::enterEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::suspendEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::suspendEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::suspendEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("suspendEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->suspendEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.suspendEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::suspendEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::resumeEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::resumeEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::resumeEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("resumeEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->resumeEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.resumeEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::resumeEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::escapeEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::escapeEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::escapeEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("escapeEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->escapeEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.escapeEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::escapeEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::keyPressEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::keyPressEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::keyPressEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("keyPressEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QKeyEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QKeyEvent*
                    ap0 =
                    qscriptvalue_cast<
                    QKeyEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type QKeyEvent*.",
                               context);                    
                    }
                    QKeyEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->keyPressEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.keyPressEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::keyPressEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::keyReleaseEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::keyReleaseEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::keyReleaseEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("keyReleaseEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QKeyEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QKeyEvent*
                    ap0 =
                    qscriptvalue_cast<
                    QKeyEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type QKeyEvent*.",
                               context);                    
                    }
                    QKeyEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->keyReleaseEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.keyReleaseEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::keyReleaseEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::mousePressEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::mousePressEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::mousePressEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("mousePressEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RMouseEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RMouseEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RMouseEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type RMouseEvent*.",
                               context);                    
                    }
                    RMouseEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->mousePressEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.mousePressEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::mousePressEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::mouseMoveEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::mouseMoveEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::mouseMoveEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("mouseMoveEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RMouseEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RMouseEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RMouseEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type RMouseEvent*.",
                               context);                    
                    }
                    RMouseEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->mouseMoveEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.mouseMoveEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::mouseMoveEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::mouseReleaseEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::mouseReleaseEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::mouseReleaseEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("mouseReleaseEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RMouseEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RMouseEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RMouseEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type RMouseEvent*.",
                               context);                    
                    }
                    RMouseEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->mouseReleaseEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.mouseReleaseEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::mouseReleaseEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::mouseDoubleClickEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::mouseDoubleClickEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::mouseDoubleClickEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("mouseDoubleClickEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RMouseEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RMouseEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RMouseEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type RMouseEvent*.",
                               context);                    
                    }
                    RMouseEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->mouseDoubleClickEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.mouseDoubleClickEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::mouseDoubleClickEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::wheelEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::wheelEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::wheelEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("wheelEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RWheelEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RWheelEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RWheelEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type RWheelEvent*.",
                               context);                    
                    }
                    RWheelEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->wheelEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.wheelEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::wheelEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::tabletEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::tabletEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::tabletEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("tabletEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTabletEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RTabletEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RTabletEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type RTabletEvent*.",
                               context);                    
                    }
                    RTabletEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->tabletEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.tabletEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::tabletEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::swipeGestureEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::swipeGestureEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::swipeGestureEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("swipeGestureEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QSwipeGesture */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QSwipeGesture*
                    ap0 =
                    qscriptvalue_cast<
                    QSwipeGesture*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type QSwipeGesture*.",
                               context);                    
                    }
                    QSwipeGesture& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->swipeGestureEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.swipeGestureEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::swipeGestureEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::panGestureEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::panGestureEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::panGestureEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("panGestureEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QPanGesture */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QPanGesture*
                    ap0 =
                    qscriptvalue_cast<
                    QPanGesture*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type QPanGesture*.",
                               context);                    
                    }
                    QPanGesture& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->panGestureEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.panGestureEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::panGestureEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::pinchGestureEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::pinchGestureEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::pinchGestureEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("pinchGestureEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QPinchGesture */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QPinchGesture*
                    ap0 =
                    qscriptvalue_cast<
                    QPinchGesture*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type QPinchGesture*.",
                               context);                    
                    }
                    QPinchGesture& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->pinchGestureEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.pinchGestureEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::pinchGestureEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::commandEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::commandEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::commandEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("commandEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RCommandEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RCommandEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RCommandEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type RCommandEvent*.",
                               context);                    
                    }
                    RCommandEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->commandEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.commandEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::commandEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::commandEventPreview
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::commandEventPreview", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::commandEventPreview";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("commandEventPreview", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RCommandEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RCommandEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RCommandEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type RCommandEvent*.",
                               context);                    
                    }
                    RCommandEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->commandEventPreview(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.commandEventPreview().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::commandEventPreview", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::coordinateEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::coordinateEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::coordinateEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("coordinateEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RCoordinateEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RCoordinateEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RCoordinateEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type RCoordinateEvent*.",
                               context);                    
                    }
                    RCoordinateEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->coordinateEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.coordinateEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::coordinateEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::coordinateEventPreview
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::coordinateEventPreview", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::coordinateEventPreview";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("coordinateEventPreview", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RCoordinateEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RCoordinateEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RCoordinateEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type RCoordinateEvent*.",
                               context);                    
                    }
                    RCoordinateEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->coordinateEventPreview(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.coordinateEventPreview().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::coordinateEventPreview", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::entityPickEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::entityPickEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::entityPickEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("entityPickEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REntityPickEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    REntityPickEvent*
                    ap0 =
                    qscriptvalue_cast<
                    REntityPickEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type REntityPickEvent*.",
                               context);                    
                    }
                    REntityPickEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->entityPickEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.entityPickEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::entityPickEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::entityPickEventPreview
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::entityPickEventPreview", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::entityPickEventPreview";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("entityPickEventPreview", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REntityPickEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    REntityPickEvent*
                    ap0 =
                    qscriptvalue_cast<
                    REntityPickEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type REntityPickEvent*.",
                               context);                    
                    }
                    REntityPickEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->entityPickEventPreview(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.entityPickEventPreview().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::entityPickEventPreview", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::propertyChangeEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::propertyChangeEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::propertyChangeEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("propertyChangeEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyEvent */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type RPropertyEvent.",
                               context);                    
                    }
                    RPropertyEvent 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->propertyChangeEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.propertyChangeEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::propertyChangeEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::zoomChangeEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::zoomChangeEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::zoomChangeEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("zoomChangeEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RGraphicsView */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RGraphicsView*
                    ap0 =
                    qscriptvalue_cast<
                    RGraphicsView*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type RGraphicsView*.",
                               context);                    
                    }
                    RGraphicsView& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->zoomChangeEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.zoomChangeEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::zoomChangeEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::updatePreview
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::updatePreview", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::updatePreview";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("updatePreview", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->updatePreview();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.updatePreview().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::updatePreview", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::applyOperation
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::applyOperation", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::applyOperation";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("applyOperation", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->applyOperation();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.applyOperation().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::applyOperation", context, engine);
            return result;
        }
         QScriptValue
        REcmaAction::snap
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaAction::snap", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaAction::snap";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RAction* self = 
                        getSelf("snap", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RMouseEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RMouseEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RMouseEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RAction: Argument 0 is not of type RMouseEvent*.",
                               context);                    
                    }
                    RMouseEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->snap(a0);
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RAction.snap().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaAction::snap", context, engine);
            return result;
        }
         QScriptValue REcmaAction::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RAction* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RAction(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaAction::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RAction* self = getSelf("RAction", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RAction* REcmaAction::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RAction* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RAction >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RAction.%1(): "
                        "This object is not a RAction").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RAction* REcmaAction::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RAction* selfBase = getSelf(fName, context);
                RAction* self = dynamic_cast<RAction*>(selfBase);
                //return REcmaHelper::scriptValueTo<RAction >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RAction.%1(): "
                    "This object is not a RAction").arg(fName),
                    context);
            }

            return self;
            


        }
         QScriptValue REcmaAction::toScriptValueEnumClickMode(QScriptEngine* engine, const RAction::ClickMode& value)
    
        {
            return QScriptValue(engine, (int)value);
        }
         void REcmaAction::fromScriptValueEnumClickMode(const QScriptValue& value, RAction::ClickMode& out)
    
        {
            out = qvariant_cast<RAction::ClickMode>(value.toVariant());
        }
        