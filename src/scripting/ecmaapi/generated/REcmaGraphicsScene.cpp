// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaGraphicsScene.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
                #include "RDocumentInterface.h"
            
            
        // includes for base ecma wrapper classes
        
                  #include "REcmaExporter.h"
                 void REcmaGraphicsScene::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RGraphicsScene*) 0)));
        protoCreated = true;
    }

    
        // primary base class RExporter:
        
            QScriptValue dpt = engine.defaultPrototype(
                qMetaTypeId<RExporter*>());

            if (dpt.isValid()) {
                proto->setPrototype(dpt);
            }
          
        /*
        
        */
    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    
        // conversion for base class RExporter
        REcmaHelper::registerFunction(&engine, proto, getRExporter, "getRExporter");
        

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, getDocumentInterface, "getDocumentInterface");
            
            REcmaHelper::registerFunction(&engine, proto, getGraphicsViews, "getGraphicsViews");
            
            REcmaHelper::registerFunction(&engine, proto, clear, "clear");
            
            REcmaHelper::registerFunction(&engine, proto, exportDocumentSettings, "exportDocumentSettings");
            
            REcmaHelper::registerFunction(&engine, proto, regenerate, "regenerate");
            
            REcmaHelper::registerFunction(&engine, proto, updateSelectionStatus, "updateSelectionStatus");
            
            REcmaHelper::registerFunction(&engine, proto, regenerateViews, "regenerateViews");
            
            REcmaHelper::registerFunction(&engine, proto, repaintViews, "repaintViews");
            
            REcmaHelper::registerFunction(&engine, proto, setCursor, "setCursor");
            
            REcmaHelper::registerFunction(&engine, proto, handleTerminateEvent, "handleTerminateEvent");
            
            REcmaHelper::registerFunction(&engine, proto, handleKeyPressEvent, "handleKeyPressEvent");
            
            REcmaHelper::registerFunction(&engine, proto, handleKeyReleaseEvent, "handleKeyReleaseEvent");
            
            REcmaHelper::registerFunction(&engine, proto, handleMouseMoveEvent, "handleMouseMoveEvent");
            
            REcmaHelper::registerFunction(&engine, proto, handleMousePressEvent, "handleMousePressEvent");
            
            REcmaHelper::registerFunction(&engine, proto, handleMouseReleaseEvent, "handleMouseReleaseEvent");
            
            REcmaHelper::registerFunction(&engine, proto, handleMouseDoubleClickEvent, "handleMouseDoubleClickEvent");
            
            REcmaHelper::registerFunction(&engine, proto, handleWheelEvent, "handleWheelEvent");
            
            REcmaHelper::registerFunction(&engine, proto, handleTabletEvent, "handleTabletEvent");
            
            REcmaHelper::registerFunction(&engine, proto, handleSwipeGestureEvent, "handleSwipeGestureEvent");
            
            REcmaHelper::registerFunction(&engine, proto, handlePanGestureEvent, "handlePanGestureEvent");
            
            REcmaHelper::registerFunction(&engine, proto, handlePinchGestureEvent, "handlePinchGestureEvent");
            
            REcmaHelper::registerFunction(&engine, proto, registerView, "registerView");
            
            REcmaHelper::registerFunction(&engine, proto, unregisterView, "unregisterView");
            
            REcmaHelper::registerFunction(&engine, proto, beginPreview, "beginPreview");
            
            REcmaHelper::registerFunction(&engine, proto, endPreview, "endPreview");
            
            REcmaHelper::registerFunction(&engine, proto, clearPreview, "clearPreview");
            
            REcmaHelper::registerFunction(&engine, proto, isPreviewEmpty, "isPreviewEmpty");
            
            REcmaHelper::registerFunction(&engine, proto, addToPreview, "addToPreview");
            
            REcmaHelper::registerFunction(&engine, proto, beginNoColorMode, "beginNoColorMode");
            
            REcmaHelper::registerFunction(&engine, proto, endNoColorMode, "endNoColorMode");
            
            REcmaHelper::registerFunction(&engine, proto, getNoColorMode, "getNoColorMode");
            
            REcmaHelper::registerFunction(&engine, proto, getHighlightedReferencePoint, "getHighlightedReferencePoint");
            
            REcmaHelper::registerFunction(&engine, proto, highlightEntity, "highlightEntity");
            
            REcmaHelper::registerFunction(&engine, proto, highlightReferencePoint, "highlightReferencePoint");
            
            REcmaHelper::registerFunction(&engine, proto, selectReferencePoints, "selectReferencePoints");
            
            REcmaHelper::registerFunction(&engine, proto, exportCurrentEntity, "exportCurrentEntity");
            
            REcmaHelper::registerFunction(&engine, proto, unexportEntity, "unexportEntity");
            
            REcmaHelper::registerFunction(&engine, proto, countReferencePoints, "countReferencePoints");
            
            REcmaHelper::registerFunction(&engine, proto, hasSelectedReferencePoints, "hasSelectedReferencePoints");
            
            REcmaHelper::registerFunction(&engine, proto, dump, "dump");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RGraphicsScene*>(), *proto);

        
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    

    // static properties:
    

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RGraphicsScene",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaGraphicsScene::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
           return REcmaHelper::throwError("Abstract class RGraphicsScene: Cannot be constructed.",
               context); 
    }
    

    // conversion functions for base classes:
     QScriptValue REcmaGraphicsScene::getRExporter(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RExporter* cppResult =
                    qscriptvalue_cast<RGraphicsScene*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
            

    // returns class name:
     QScriptValue REcmaGraphicsScene::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RGraphicsScene"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaGraphicsScene::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        
        list.append("RExporter");
    

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaGraphicsScene::getDocumentInterface
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::getDocumentInterface", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::getDocumentInterface";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("getDocumentInterface", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RDocumentInterface &'
    RDocumentInterface & cppResult =
        
               self->getDocumentInterface();
        // return type: RDocumentInterface &
                // reference
                result = engine->newVariant(
                QVariant::fromValue(&cppResult));
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.getDocumentInterface().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::getDocumentInterface", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::getGraphicsViews
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::getGraphicsViews", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::getGraphicsViews";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("getGraphicsViews", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QList < RGraphicsView * >'
    QList < RGraphicsView * > cppResult =
        
               self->getGraphicsViews();
        // return type: QList < RGraphicsView * >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.getGraphicsViews().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::getGraphicsViews", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::clear
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::clear", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::clear";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("clear", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->clear();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.clear().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::clear", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::exportDocumentSettings
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::exportDocumentSettings", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::exportDocumentSettings";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("exportDocumentSettings", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->exportDocumentSettings();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.exportDocumentSettings().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::exportDocumentSettings", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::regenerate
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::regenerate", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::regenerate";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("regenerate", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->regenerate();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->regenerate(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isArray()
        ) /* type: QSet < REntity::Id > */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QSet < REntity::Id >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->regenerate(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.regenerate().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::regenerate", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::updateSelectionStatus
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::updateSelectionStatus", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::updateSelectionStatus";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("updateSelectionStatus", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isArray()
        ) /* type: QSet < REntity::Id > */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QSet < REntity::Id >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->updateSelectionStatus(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.updateSelectionStatus().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::updateSelectionStatus", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::regenerateViews
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::regenerateViews", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::regenerateViews";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("regenerateViews", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->regenerateViews();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->regenerateViews(a0);
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QSet < RObject::Id > */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QSet < RObject::Id >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->regenerateViews(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.regenerateViews().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::regenerateViews", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::repaintViews
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::repaintViews", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::repaintViews";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("repaintViews", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->repaintViews();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.repaintViews().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::repaintViews", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::setCursor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::setCursor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::setCursor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("setCursor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QCursor */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QCursor*
                    ap0 =
                    qscriptvalue_cast<
                    QCursor*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsScene: Argument 0 is not of type QCursor*.",
                               context);                    
                    }
                    QCursor& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setCursor(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.setCursor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::setCursor", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::handleTerminateEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::handleTerminateEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::handleTerminateEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("handleTerminateEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTerminateEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RTerminateEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RTerminateEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsScene: Argument 0 is not of type RTerminateEvent*.",
                               context);                    
                    }
                    RTerminateEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleTerminateEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.handleTerminateEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::handleTerminateEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::handleKeyPressEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::handleKeyPressEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::handleKeyPressEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("handleKeyPressEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QKeyEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QKeyEvent*
                    ap0 =
                    qscriptvalue_cast<
                    QKeyEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsScene: Argument 0 is not of type QKeyEvent*.",
                               context);                    
                    }
                    QKeyEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleKeyPressEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.handleKeyPressEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::handleKeyPressEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::handleKeyReleaseEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::handleKeyReleaseEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::handleKeyReleaseEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("handleKeyReleaseEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QKeyEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QKeyEvent*
                    ap0 =
                    qscriptvalue_cast<
                    QKeyEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsScene: Argument 0 is not of type QKeyEvent*.",
                               context);                    
                    }
                    QKeyEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleKeyReleaseEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.handleKeyReleaseEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::handleKeyReleaseEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::handleMouseMoveEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::handleMouseMoveEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::handleMouseMoveEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("handleMouseMoveEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RMouseEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RMouseEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RMouseEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsScene: Argument 0 is not of type RMouseEvent*.",
                               context);                    
                    }
                    RMouseEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleMouseMoveEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.handleMouseMoveEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::handleMouseMoveEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::handleMousePressEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::handleMousePressEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::handleMousePressEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("handleMousePressEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RMouseEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RMouseEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RMouseEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsScene: Argument 0 is not of type RMouseEvent*.",
                               context);                    
                    }
                    RMouseEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleMousePressEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.handleMousePressEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::handleMousePressEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::handleMouseReleaseEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::handleMouseReleaseEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::handleMouseReleaseEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("handleMouseReleaseEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RMouseEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RMouseEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RMouseEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsScene: Argument 0 is not of type RMouseEvent*.",
                               context);                    
                    }
                    RMouseEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleMouseReleaseEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.handleMouseReleaseEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::handleMouseReleaseEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::handleMouseDoubleClickEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::handleMouseDoubleClickEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::handleMouseDoubleClickEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("handleMouseDoubleClickEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RMouseEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RMouseEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RMouseEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsScene: Argument 0 is not of type RMouseEvent*.",
                               context);                    
                    }
                    RMouseEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleMouseDoubleClickEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.handleMouseDoubleClickEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::handleMouseDoubleClickEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::handleWheelEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::handleWheelEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::handleWheelEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("handleWheelEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RWheelEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RWheelEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RWheelEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsScene: Argument 0 is not of type RWheelEvent*.",
                               context);                    
                    }
                    RWheelEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleWheelEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.handleWheelEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::handleWheelEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::handleTabletEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::handleTabletEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::handleTabletEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("handleTabletEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTabletEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RTabletEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RTabletEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsScene: Argument 0 is not of type RTabletEvent*.",
                               context);                    
                    }
                    RTabletEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleTabletEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.handleTabletEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::handleTabletEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::handleSwipeGestureEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::handleSwipeGestureEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::handleSwipeGestureEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("handleSwipeGestureEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QSwipeGesture */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QSwipeGesture*
                    ap0 =
                    qscriptvalue_cast<
                    QSwipeGesture*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsScene: Argument 0 is not of type QSwipeGesture*.",
                               context);                    
                    }
                    QSwipeGesture& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleSwipeGestureEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.handleSwipeGestureEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::handleSwipeGestureEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::handlePanGestureEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::handlePanGestureEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::handlePanGestureEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("handlePanGestureEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QPanGesture */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QPanGesture*
                    ap0 =
                    qscriptvalue_cast<
                    QPanGesture*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsScene: Argument 0 is not of type QPanGesture*.",
                               context);                    
                    }
                    QPanGesture& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handlePanGestureEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.handlePanGestureEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::handlePanGestureEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::handlePinchGestureEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::handlePinchGestureEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::handlePinchGestureEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("handlePinchGestureEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QPinchGesture */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QPinchGesture*
                    ap0 =
                    qscriptvalue_cast<
                    QPinchGesture*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsScene: Argument 0 is not of type QPinchGesture*.",
                               context);                    
                    }
                    QPinchGesture& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handlePinchGestureEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.handlePinchGestureEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::handlePinchGestureEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::registerView
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::registerView", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::registerView";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("registerView", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RGraphicsView * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RGraphicsView * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RGraphicsView >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsScene: Argument 0 is not of type RGraphicsView *RGraphicsView *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->registerView(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RGraphicsView * */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RGraphicsView * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RGraphicsView >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsScene: Argument 0 is not of type RGraphicsView *RGraphicsView *.", context);                    
                    }
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->registerView(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.registerView().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::registerView", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::unregisterView
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::unregisterView", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::unregisterView";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("unregisterView", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RGraphicsView * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RGraphicsView * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RGraphicsView >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsScene: Argument 0 is not of type RGraphicsView *RGraphicsView *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->unregisterView(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.unregisterView().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::unregisterView", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::beginPreview
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::beginPreview", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::beginPreview";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("beginPreview", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->beginPreview();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.beginPreview().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::beginPreview", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::endPreview
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::endPreview", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::endPreview";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("endPreview", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->endPreview();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.endPreview().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::endPreview", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::clearPreview
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::clearPreview", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::clearPreview";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("clearPreview", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->clearPreview();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.clearPreview().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::clearPreview", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::isPreviewEmpty
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::isPreviewEmpty", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::isPreviewEmpty";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("isPreviewEmpty", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isPreviewEmpty();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.isPreviewEmpty().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::isPreviewEmpty", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::addToPreview
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::addToPreview", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::addToPreview";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("addToPreview", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: REntity::Id */
     && (
            context->argument(1).isArray()
        ) /* type: QList < RGraphicsSceneDrawable > */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    REntity::Id
                    a0 =
                    (REntity::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isArray
                    QList < RGraphicsSceneDrawable >
                    a1;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(1),
                        a1
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addToPreview(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: REntity::Id */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RGraphicsSceneDrawable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    REntity::Id
                    a0 =
                    (REntity::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RGraphicsSceneDrawable*
                    ap1 =
                    qscriptvalue_cast<
                    RGraphicsSceneDrawable*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RGraphicsScene: Argument 1 is not of type RGraphicsSceneDrawable.",
                               context);                    
                    }
                    RGraphicsSceneDrawable 
                    a1 = 
                    *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addToPreview(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.addToPreview().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::addToPreview", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::beginNoColorMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::beginNoColorMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::beginNoColorMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("beginNoColorMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->beginNoColorMode();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.beginNoColorMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::beginNoColorMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::endNoColorMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::endNoColorMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::endNoColorMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("endNoColorMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->endNoColorMode();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.endNoColorMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::endNoColorMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::getNoColorMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::getNoColorMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::getNoColorMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("getNoColorMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getNoColorMode();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.getNoColorMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::getNoColorMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::getHighlightedReferencePoint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::getHighlightedReferencePoint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::getHighlightedReferencePoint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("getHighlightedReferencePoint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RRefPoint'
    RRefPoint cppResult =
        
               self->getHighlightedReferencePoint();
        // return type: RRefPoint
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.getHighlightedReferencePoint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::getHighlightedReferencePoint", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::highlightEntity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::highlightEntity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::highlightEntity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("highlightEntity", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REntity */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    REntity*
                    ap0 =
                    qscriptvalue_cast<
                    REntity*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsScene: Argument 0 is not of type REntity*.",
                               context);                    
                    }
                    REntity& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->highlightEntity(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.highlightEntity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::highlightEntity", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::highlightReferencePoint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::highlightReferencePoint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::highlightReferencePoint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("highlightReferencePoint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RRefPoint */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RRefPoint*
                    ap0 =
                    qscriptvalue_cast<
                    RRefPoint*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsScene: Argument 0 is not of type RRefPoint.",
                               context);                    
                    }
                    RRefPoint 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->highlightReferencePoint(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.highlightReferencePoint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::highlightReferencePoint", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::selectReferencePoints
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::selectReferencePoints", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::selectReferencePoints";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("selectReferencePoints", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RBox */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RBox*
                    ap0 =
                    qscriptvalue_cast<
                    RBox*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsScene: Argument 0 is not of type RBox.",
                               context);                    
                    }
                    RBox 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->selectReferencePoints(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.selectReferencePoints().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::selectReferencePoints", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::exportCurrentEntity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::exportCurrentEntity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::exportCurrentEntity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("exportCurrentEntity", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportCurrentEntity();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportCurrentEntity(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isBool()
        ) /* type: bool */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportCurrentEntity(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.exportCurrentEntity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::exportCurrentEntity", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::unexportEntity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::unexportEntity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::unexportEntity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("unexportEntity", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: REntity::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    REntity::Id
                    a0 =
                    (REntity::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->unexportEntity(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.unexportEntity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::unexportEntity", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::countReferencePoints
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::countReferencePoints", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::countReferencePoints";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("countReferencePoints", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->countReferencePoints();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.countReferencePoints().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::countReferencePoints", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::hasSelectedReferencePoints
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::hasSelectedReferencePoints", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::hasSelectedReferencePoints";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("hasSelectedReferencePoints", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->hasSelectedReferencePoints();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.hasSelectedReferencePoints().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::hasSelectedReferencePoints", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsScene::dump
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsScene::dump", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsScene::dump";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsScene* self = 
                        getSelf("dump", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->dump();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsScene.dump().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsScene::dump", context, engine);
            return result;
        }
         QScriptValue REcmaGraphicsScene::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RGraphicsScene* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RGraphicsScene(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaGraphicsScene::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RGraphicsScene* self = getSelf("RGraphicsScene", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RGraphicsScene* REcmaGraphicsScene::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RGraphicsScene* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RGraphicsScene >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RGraphicsScene.%1(): "
                        "This object is not a RGraphicsScene").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RGraphicsScene* REcmaGraphicsScene::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RGraphicsScene* selfBase = getSelf(fName, context);
                RGraphicsScene* self = dynamic_cast<RGraphicsScene*>(selfBase);
                //return REcmaHelper::scriptValueTo<RGraphicsScene >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RGraphicsScene.%1(): "
                    "This object is not a RGraphicsScene").arg(fName),
                    context);
            }

            return self;
            


        }
        