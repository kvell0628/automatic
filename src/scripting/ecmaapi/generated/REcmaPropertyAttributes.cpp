// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is copyable.
        
        #include "REcmaPropertyAttributes.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
            
        // includes for base ecma wrapper classes
         void REcmaPropertyAttributes::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RPropertyAttributes*) 0)));
        protoCreated = true;
    }

    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    
    // copy:
    REcmaHelper::registerFunction(&engine, proto, copy, "copy");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, setOption, "setOption");
            
            REcmaHelper::registerFunction(&engine, proto, isReadOnly, "isReadOnly");
            
            REcmaHelper::registerFunction(&engine, proto, setReadOnly, "setReadOnly");
            
            REcmaHelper::registerFunction(&engine, proto, isInvisible, "isInvisible");
            
            REcmaHelper::registerFunction(&engine, proto, setInvisible, "setInvisible");
            
            REcmaHelper::registerFunction(&engine, proto, isUndeletable, "isUndeletable");
            
            REcmaHelper::registerFunction(&engine, proto, setUndeletable, "setUndeletable");
            
            REcmaHelper::registerFunction(&engine, proto, isList, "isList");
            
            REcmaHelper::registerFunction(&engine, proto, setList, "setList");
            
            REcmaHelper::registerFunction(&engine, proto, isAngleType, "isAngleType");
            
            REcmaHelper::registerFunction(&engine, proto, setAngleType, "setAngleType");
            
            REcmaHelper::registerFunction(&engine, proto, getIgnoreCase, "getIgnoreCase");
            
            REcmaHelper::registerFunction(&engine, proto, setIgnoreCase, "setIgnoreCase");
            
            REcmaHelper::registerFunction(&engine, proto, affectsOtherProperties, "affectsOtherProperties");
            
            REcmaHelper::registerFunction(&engine, proto, setAffectsOtherProperties, "setAffectsOtherProperties");
            
            REcmaHelper::registerFunction(&engine, proto, setAllowMixedValue, "setAllowMixedValue");
            
            REcmaHelper::registerFunction(&engine, proto, getAllowMixedValue, "getAllowMixedValue");
            
            REcmaHelper::registerFunction(&engine, proto, getChoices, "getChoices");
            
            REcmaHelper::registerFunction(&engine, proto, setChoices, "setChoices");
            
            REcmaHelper::registerFunction(&engine, proto, hasChoices, "hasChoices");
            
            REcmaHelper::registerFunction(&engine, proto, isRichText, "isRichText");
            
            REcmaHelper::registerFunction(&engine, proto, setRichText, "setRichText");
            
            REcmaHelper::registerFunction(&engine, proto, isStyle, "isStyle");
            
            REcmaHelper::registerFunction(&engine, proto, setStyle, "setStyle");
            
            REcmaHelper::registerFunction(&engine, proto, mixWith, "mixWith");
            
            REcmaHelper::registerFunction(&engine, proto, isMixed, "isMixed");
            
            REcmaHelper::registerFunction(&engine, proto, setMixed, "setMixed");
            
            REcmaHelper::registerFunction(&engine, proto, isSum, "isSum");
            
            REcmaHelper::registerFunction(&engine, proto, setSum, "setSum");
            
            REcmaHelper::registerFunction(&engine, proto, isOnRequest, "isOnRequest");
            
            REcmaHelper::registerFunction(&engine, proto, setOnRequest, "setOnRequest");
            
            REcmaHelper::registerFunction(&engine, proto, isLabel, "isLabel");
            
            REcmaHelper::registerFunction(&engine, proto, isCustom, "isCustom");
            
            REcmaHelper::registerFunction(&engine, proto, isDimensionLabel, "isDimensionLabel");
            
            REcmaHelper::registerFunction(&engine, proto, isInteger, "isInteger");
            
            REcmaHelper::registerFunction(&engine, proto, isRedundant, "isRedundant");
            
            REcmaHelper::registerFunction(&engine, proto, setRedundant, "setRedundant");
            
            REcmaHelper::registerFunction(&engine, proto, isVisibleToParent, "isVisibleToParent");
            
            REcmaHelper::registerFunction(&engine, proto, isNumericallySorted, "isNumericallySorted");
            
            REcmaHelper::registerFunction(&engine, proto, setNumericallySorted, "setNumericallySorted");
            
            REcmaHelper::registerFunction(&engine, proto, isScaleType, "isScaleType");
            
            REcmaHelper::registerFunction(&engine, proto, setScaleType, "setScaleType");
            
            REcmaHelper::registerFunction(&engine, proto, isAreaType, "isAreaType");
            
            REcmaHelper::registerFunction(&engine, proto, setAreaType, "setAreaType");
            
            REcmaHelper::registerFunction(&engine, proto, isUnitLess, "isUnitLess");
            
            REcmaHelper::registerFunction(&engine, proto, setUnitLess, "setUnitLess");
            
            REcmaHelper::registerFunction(&engine, proto, getLabel, "getLabel");
            
            REcmaHelper::registerFunction(&engine, proto, setLabel, "setLabel");
            
            REcmaHelper::registerFunction(&engine, proto, equals, "equals");
            
            REcmaHelper::registerFunction(&engine, proto, operator_not_assign, "operator_not_assign");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RPropertyAttributes*>(), *proto);

        
                engine.setDefaultPrototype(qMetaTypeId<
                RPropertyAttributes
                > (), *proto);
            
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    

    // static properties:
    

    // enum values:
    

    ctor.setProperty("NoOptions",
    QScriptValue(RPropertyAttributes::NoOptions),
    QScriptValue::ReadOnly);


    ctor.setProperty("ReadOnly",
    QScriptValue(RPropertyAttributes::ReadOnly),
    QScriptValue::ReadOnly);


    ctor.setProperty("Invisible",
    QScriptValue(RPropertyAttributes::Invisible),
    QScriptValue::ReadOnly);


    ctor.setProperty("Angle",
    QScriptValue(RPropertyAttributes::Angle),
    QScriptValue::ReadOnly);


    ctor.setProperty("AffectsOtherProperties",
    QScriptValue(RPropertyAttributes::AffectsOtherProperties),
    QScriptValue::ReadOnly);


    ctor.setProperty("IgnoreCase",
    QScriptValue(RPropertyAttributes::IgnoreCase),
    QScriptValue::ReadOnly);


    ctor.setProperty("AllowMixedValue",
    QScriptValue(RPropertyAttributes::AllowMixedValue),
    QScriptValue::ReadOnly);


    ctor.setProperty("List",
    QScriptValue(RPropertyAttributes::List),
    QScriptValue::ReadOnly);


    ctor.setProperty("Mixed",
    QScriptValue(RPropertyAttributes::Mixed),
    QScriptValue::ReadOnly);


    ctor.setProperty("RichText",
    QScriptValue(RPropertyAttributes::RichText),
    QScriptValue::ReadOnly);


    ctor.setProperty("Style",
    QScriptValue(RPropertyAttributes::Style),
    QScriptValue::ReadOnly);


    ctor.setProperty("DimensionLabel",
    QScriptValue(RPropertyAttributes::DimensionLabel),
    QScriptValue::ReadOnly);


    ctor.setProperty("Label",
    QScriptValue(RPropertyAttributes::Label),
    QScriptValue::ReadOnly);


    ctor.setProperty("Pattern",
    QScriptValue(RPropertyAttributes::Pattern),
    QScriptValue::ReadOnly);


    ctor.setProperty("Custom",
    QScriptValue(RPropertyAttributes::Custom),
    QScriptValue::ReadOnly);


    ctor.setProperty("Integer",
    QScriptValue(RPropertyAttributes::Integer),
    QScriptValue::ReadOnly);


    ctor.setProperty("Redundant",
    QScriptValue(RPropertyAttributes::Redundant),
    QScriptValue::ReadOnly);


    ctor.setProperty("VisibleToParent",
    QScriptValue(RPropertyAttributes::VisibleToParent),
    QScriptValue::ReadOnly);


    ctor.setProperty("KnownVariable",
    QScriptValue(RPropertyAttributes::KnownVariable),
    QScriptValue::ReadOnly);


    ctor.setProperty("NumericallySorted",
    QScriptValue(RPropertyAttributes::NumericallySorted),
    QScriptValue::ReadOnly);


    ctor.setProperty("Percentage",
    QScriptValue(RPropertyAttributes::Percentage),
    QScriptValue::ReadOnly);


    ctor.setProperty("Sum",
    QScriptValue(RPropertyAttributes::Sum),
    QScriptValue::ReadOnly);


    ctor.setProperty("Undeletable",
    QScriptValue(RPropertyAttributes::Undeletable),
    QScriptValue::ReadOnly);


    ctor.setProperty("OnRequest",
    QScriptValue(RPropertyAttributes::OnRequest),
    QScriptValue::ReadOnly);


    ctor.setProperty("Location",
    QScriptValue(RPropertyAttributes::Location),
    QScriptValue::ReadOnly);


    ctor.setProperty("RefPoint",
    QScriptValue(RPropertyAttributes::RefPoint),
    QScriptValue::ReadOnly);


    ctor.setProperty("Geometry",
    QScriptValue(RPropertyAttributes::Geometry),
    QScriptValue::ReadOnly);


    ctor.setProperty("Scale",
    QScriptValue(RPropertyAttributes::Scale),
    QScriptValue::ReadOnly);


    ctor.setProperty("Area",
    QScriptValue(RPropertyAttributes::Area),
    QScriptValue::ReadOnly);


    ctor.setProperty("UnitLess",
    QScriptValue(RPropertyAttributes::UnitLess),
    QScriptValue::ReadOnly);


    // enum conversions:
    
    qScriptRegisterMetaType<RPropertyAttributes::Option>(
        &engine,
        toScriptValueEnumOption,
        fromScriptValueEnumOption,
        ctor.property(QString::fromLatin1("prototype"))
    );

        
    // init class:
    engine.globalObject().setProperty("RPropertyAttributes",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaPropertyAttributes::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RPropertyAttributes(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RPropertyAttributes
                    cppResult;
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    if( context->argumentCount() ==
        1
                && (
                
                        context->argument(
                        0
                        ).isVariant()
                        ||
                    
                        context->argument(
                        0
                        ).isQObject()
                        ||
                    
                        context->argument(
                        0
                        ).isNull()
                ) /* type: RPropertyAttributes::Options */
            
    ){
    // prepare arguments:
    
                    // argument is reference
                    RPropertyAttributes::Options*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyAttributes::Options*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RPropertyAttributes: Argument 0 is not of type RPropertyAttributes::Options*.",
                               context);                    
                    }
                    RPropertyAttributes::Options& a0 = *ap0;
                
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RPropertyAttributes
                    cppResult(
                    a0
                    );
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RPropertyAttributes(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
    

    // returns class name:
     QScriptValue REcmaPropertyAttributes::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RPropertyAttributes"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaPropertyAttributes::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaPropertyAttributes::setOption
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setOption", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setOption";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setOption", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyAttributes::Option */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RPropertyAttributes::Option*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyAttributes::Option*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RPropertyAttributes: Argument 0 is not of type RPropertyAttributes::Option*.",
                               context);                    
                    }
                    RPropertyAttributes::Option& a0 = *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setOption(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setOption().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setOption", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isReadOnly
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isReadOnly", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isReadOnly";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isReadOnly", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isReadOnly();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isReadOnly().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isReadOnly", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setReadOnly
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setReadOnly", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setReadOnly";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setReadOnly", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setReadOnly(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setReadOnly().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setReadOnly", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isInvisible
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isInvisible", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isInvisible";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isInvisible", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isInvisible();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isInvisible().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isInvisible", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setInvisible
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setInvisible", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setInvisible";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setInvisible", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setInvisible(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setInvisible().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setInvisible", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isUndeletable
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isUndeletable", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isUndeletable";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isUndeletable", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isUndeletable();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isUndeletable().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isUndeletable", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setUndeletable
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setUndeletable", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setUndeletable";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setUndeletable", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setUndeletable(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setUndeletable().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setUndeletable", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isList
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isList", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isList";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isList", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isList();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isList().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isList", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setList
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setList", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setList";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setList", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setList(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setList().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setList", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isAngleType
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isAngleType", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isAngleType";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isAngleType", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isAngleType();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isAngleType().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isAngleType", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setAngleType
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setAngleType", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setAngleType";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setAngleType", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setAngleType(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setAngleType().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setAngleType", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::getIgnoreCase
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::getIgnoreCase", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::getIgnoreCase";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("getIgnoreCase", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getIgnoreCase();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.getIgnoreCase().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::getIgnoreCase", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setIgnoreCase
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setIgnoreCase", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setIgnoreCase";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setIgnoreCase", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setIgnoreCase(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setIgnoreCase().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setIgnoreCase", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::affectsOtherProperties
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::affectsOtherProperties", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::affectsOtherProperties";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("affectsOtherProperties", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->affectsOtherProperties();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.affectsOtherProperties().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::affectsOtherProperties", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setAffectsOtherProperties
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setAffectsOtherProperties", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setAffectsOtherProperties";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setAffectsOtherProperties", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setAffectsOtherProperties(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setAffectsOtherProperties().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setAffectsOtherProperties", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setAllowMixedValue
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setAllowMixedValue", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setAllowMixedValue";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setAllowMixedValue", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setAllowMixedValue(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setAllowMixedValue().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setAllowMixedValue", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::getAllowMixedValue
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::getAllowMixedValue", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::getAllowMixedValue";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("getAllowMixedValue", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getAllowMixedValue();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.getAllowMixedValue().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::getAllowMixedValue", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::getChoices
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::getChoices", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::getChoices";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("getChoices", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < QString >'
    QSet < QString > cppResult =
        
               self->getChoices();
        // return type: QSet < QString >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.getChoices().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::getChoices", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setChoices
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setChoices", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setChoices";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setChoices", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QSet < QString > */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QSet < QString >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setChoices(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setChoices().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setChoices", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::hasChoices
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::hasChoices", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::hasChoices";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("hasChoices", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->hasChoices();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.hasChoices().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::hasChoices", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isRichText
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isRichText", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isRichText";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isRichText", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isRichText();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isRichText().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isRichText", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setRichText
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setRichText", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setRichText";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setRichText", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setRichText(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setRichText().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setRichText", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isStyle
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isStyle", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isStyle";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isStyle", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isStyle();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isStyle().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isStyle", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setStyle
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setStyle", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setStyle";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setStyle", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setStyle(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setStyle().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setStyle", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::mixWith
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::mixWith", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::mixWith";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("mixWith", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyAttributes */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyAttributes*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyAttributes*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPropertyAttributes: Argument 0 is not of type RPropertyAttributes.",
                               context);                    
                    }
                    RPropertyAttributes 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->mixWith(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.mixWith().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::mixWith", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isMixed
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isMixed", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isMixed";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isMixed", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isMixed();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isMixed().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isMixed", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setMixed
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setMixed", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setMixed";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setMixed", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setMixed(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setMixed().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setMixed", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isSum
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isSum", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isSum";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isSum", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isSum();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isSum().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isSum", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setSum
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setSum", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setSum";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setSum", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setSum(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setSum().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setSum", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isOnRequest
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isOnRequest", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isOnRequest";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isOnRequest", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isOnRequest();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isOnRequest().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isOnRequest", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setOnRequest
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setOnRequest", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setOnRequest";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setOnRequest", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setOnRequest(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setOnRequest().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setOnRequest", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isLabel
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isLabel", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isLabel";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isLabel", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isLabel();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isLabel().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isLabel", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isCustom
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isCustom", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isCustom";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isCustom", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isCustom();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isCustom().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isCustom", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isDimensionLabel
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isDimensionLabel", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isDimensionLabel";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isDimensionLabel", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isDimensionLabel();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isDimensionLabel().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isDimensionLabel", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isInteger
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isInteger", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isInteger";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isInteger", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isInteger();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isInteger().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isInteger", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isRedundant
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isRedundant", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isRedundant";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isRedundant", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isRedundant();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isRedundant().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isRedundant", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setRedundant
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setRedundant", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setRedundant";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setRedundant", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setRedundant(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setRedundant().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setRedundant", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isVisibleToParent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isVisibleToParent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isVisibleToParent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isVisibleToParent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isVisibleToParent();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isVisibleToParent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isVisibleToParent", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isNumericallySorted
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isNumericallySorted", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isNumericallySorted";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isNumericallySorted", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isNumericallySorted();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isNumericallySorted().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isNumericallySorted", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setNumericallySorted
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setNumericallySorted", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setNumericallySorted";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setNumericallySorted", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setNumericallySorted(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setNumericallySorted().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setNumericallySorted", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isScaleType
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isScaleType", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isScaleType";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isScaleType", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isScaleType();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isScaleType().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isScaleType", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setScaleType
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setScaleType", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setScaleType";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setScaleType", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setScaleType(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setScaleType().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setScaleType", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isAreaType
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isAreaType", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isAreaType";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isAreaType", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isAreaType();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isAreaType().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isAreaType", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setAreaType
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setAreaType", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setAreaType";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setAreaType", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setAreaType(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setAreaType().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setAreaType", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::isUnitLess
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::isUnitLess", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::isUnitLess";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("isUnitLess", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isUnitLess();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.isUnitLess().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::isUnitLess", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setUnitLess
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setUnitLess", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setUnitLess";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setUnitLess", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setUnitLess(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setUnitLess().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setUnitLess", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::getLabel
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::getLabel", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::getLabel";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("getLabel", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getLabel();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.getLabel().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::getLabel", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::setLabel
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::setLabel", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::setLabel";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("setLabel", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setLabel(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.setLabel().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::setLabel", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::equals
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::operator ==", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::operator ==";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("operator ==", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyAttributes */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyAttributes*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyAttributes*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPropertyAttributes: Argument 0 is not of type RPropertyAttributes.",
                               context);                    
                    }
                    RPropertyAttributes 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->operator ==(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.equals().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::operator ==", context, engine);
            return result;
        }
         QScriptValue
        REcmaPropertyAttributes::operator_not_assign
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPropertyAttributes::operator !=", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPropertyAttributes::operator !=";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPropertyAttributes* self = 
                        getSelf("operator !=", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyAttributes */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyAttributes*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyAttributes*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RPropertyAttributes: Argument 0 is not of type RPropertyAttributes.",
                               context);                    
                    }
                    RPropertyAttributes 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->operator !=(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPropertyAttributes.operator_not_assign().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPropertyAttributes::operator !=", context, engine);
            return result;
        }
         QScriptValue REcmaPropertyAttributes::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RPropertyAttributes* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RPropertyAttributes(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaPropertyAttributes::copy
    (QScriptContext *context, QScriptEngine *engine)
    
    {
        RPropertyAttributes cp = qscriptvalue_cast<RPropertyAttributes>(context->thisObject());
        return qScriptValueFromValue(engine, cp);
    }
     QScriptValue REcmaPropertyAttributes::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RPropertyAttributes* self = getSelf("RPropertyAttributes", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RPropertyAttributes* REcmaPropertyAttributes::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RPropertyAttributes* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RPropertyAttributes >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RPropertyAttributes.%1(): "
                        "This object is not a RPropertyAttributes").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RPropertyAttributes* REcmaPropertyAttributes::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RPropertyAttributes* selfBase = getSelf(fName, context);
                RPropertyAttributes* self = dynamic_cast<RPropertyAttributes*>(selfBase);
                //return REcmaHelper::scriptValueTo<RPropertyAttributes >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RPropertyAttributes.%1(): "
                    "This object is not a RPropertyAttributes").arg(fName),
                    context);
            }

            return self;
            


        }
         QScriptValue REcmaPropertyAttributes::toScriptValueEnumOption(QScriptEngine* engine, const RPropertyAttributes::Option& value)
    
        {
            return QScriptValue(engine, (int)value);
        }
         void REcmaPropertyAttributes::fromScriptValueEnumOption(const QScriptValue& value, RPropertyAttributes::Option& out)
    
        {
            out = qvariant_cast<RPropertyAttributes::Option>(value.toVariant());
        }
        