// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is copyable.
        
        #include "REcmaTransformOp.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
            
        // includes for base ecma wrapper classes
         void REcmaTransformOp::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RTransformOp*) 0)));
        protoCreated = true;
    }

    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    
    // copy:
    REcmaHelper::registerFunction(&engine, proto, copy, "copy");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    
            proto->setProperty("type", engine.newFunction(
                getSetType),
                QScriptValue::PropertyGetter
                
            );          
            
            proto->setProperty("d1", engine.newFunction(
                getSetD1),
                QScriptValue::PropertyGetter
                
            );          
            
            proto->setProperty("d2", engine.newFunction(
                getSetD2),
                QScriptValue::PropertyGetter
                
            );          
            

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, getType, "getType");
            
            REcmaHelper::registerFunction(&engine, proto, getD1, "getD1");
            
            REcmaHelper::registerFunction(&engine, proto, getD2, "getD2");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RTransformOp*>(), *proto);

        
                engine.setDefaultPrototype(qMetaTypeId<
                RTransformOp
                > (), *proto);
            
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    
            REcmaHelper::registerFunction(&engine, &ctor, createTranslation, "createTranslation");
            
            REcmaHelper::registerFunction(&engine, &ctor, createScale, "createScale");
            
            REcmaHelper::registerFunction(&engine, &ctor, createRotation, "createRotation");
            

    // static properties:
    

    // enum values:
    

    ctor.setProperty("Translation",
    QScriptValue(RTransformOp::Translation),
    QScriptValue::ReadOnly);


    ctor.setProperty("Scale",
    QScriptValue(RTransformOp::Scale),
    QScriptValue::ReadOnly);


    ctor.setProperty("Rotation",
    QScriptValue(RTransformOp::Rotation),
    QScriptValue::ReadOnly);


    // enum conversions:
    
    qScriptRegisterMetaType<RTransformOp::Type>(
        &engine,
        toScriptValueEnumType,
        fromScriptValueEnumType,
        ctor.property(QString::fromLatin1("prototype"))
    );

        
    // init class:
    engine.globalObject().setProperty("RTransformOp",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaTransformOp::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RTransformOp(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
    
            // constructor without variants:
            
    if( context->argumentCount() ==
        0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RTransformOp
                    cppResult;
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RTransformOp(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
    

    // returns class name:
     QScriptValue REcmaTransformOp::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RTransformOp"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaTransformOp::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
     QScriptValue REcmaTransformOp::getSetType
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
        RTransformOp* self = getSelf("type", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        RTransformOp :: Type
        cppResult = self->
        getType();
        QScriptValue result;
        
        // return type: RTransformOp :: Type
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
        return result;
        }
         QScriptValue REcmaTransformOp::getSetD1
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
        RTransformOp* self = getSelf("d1", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        qreal
        cppResult = self->
        getD1();
        QScriptValue result;
        
        // return type: qreal
                // standard Type
                result = QScriptValue(cppResult);
            
        return result;
        }
         QScriptValue REcmaTransformOp::getSetD2
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
        RTransformOp* self = getSelf("d2", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        qreal
        cppResult = self->
        getD2();
        QScriptValue result;
        
        // return type: qreal
                // standard Type
                result = QScriptValue(cppResult);
            
        return result;
        }
        

    // public methods:
     QScriptValue
        REcmaTransformOp::createTranslation
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransformOp::createTranslation", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransformOp::createTranslation";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: qreal */
     && (
            context->argument(1).isNumber()
        ) /* type: qreal */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    qreal
                    a0 =
                    (qreal)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    qreal
                    a1 =
                    (qreal)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RTransformOp'
    RTransformOp cppResult =
        RTransformOp::
       createTranslation(a0
        ,
    a1);
        // return type: RTransformOp
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransformOp.createTranslation().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransformOp::createTranslation", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransformOp::createScale
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransformOp::createScale", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransformOp::createScale";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: qreal */
     && (
            context->argument(1).isNumber()
        ) /* type: qreal */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    qreal
                    a0 =
                    (qreal)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    qreal
                    a1 =
                    (qreal)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RTransformOp'
    RTransformOp cppResult =
        RTransformOp::
       createScale(a0
        ,
    a1);
        // return type: RTransformOp
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransformOp.createScale().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransformOp::createScale", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransformOp::createRotation
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransformOp::createRotation", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransformOp::createRotation";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: qreal */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    qreal
                    a0 =
                    (qreal)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RTransformOp'
    RTransformOp cppResult =
        RTransformOp::
       createRotation(a0);
        // return type: RTransformOp
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransformOp.createRotation().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransformOp::createRotation", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransformOp::getType
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransformOp::getType", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransformOp::getType";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransformOp* self = 
                        getSelf("getType", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RTransformOp::Type'
    RTransformOp::Type cppResult =
        
               self->getType();
        // return type: RTransformOp::Type
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransformOp.getType().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransformOp::getType", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransformOp::getD1
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransformOp::getD1", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransformOp::getD1";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransformOp* self = 
                        getSelf("getD1", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'qreal'
    qreal cppResult =
        
               self->getD1();
        // return type: qreal
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransformOp.getD1().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransformOp::getD1", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransformOp::getD2
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransformOp::getD2", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransformOp::getD2";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransformOp* self = 
                        getSelf("getD2", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'qreal'
    qreal cppResult =
        
               self->getD2();
        // return type: qreal
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransformOp.getD2().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransformOp::getD2", context, engine);
            return result;
        }
         QScriptValue REcmaTransformOp::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RTransformOp* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RTransformOp(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaTransformOp::copy
    (QScriptContext *context, QScriptEngine *engine)
    
    {
        RTransformOp cp = qscriptvalue_cast<RTransformOp>(context->thisObject());
        return qScriptValueFromValue(engine, cp);
    }
     QScriptValue REcmaTransformOp::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RTransformOp* self = getSelf("RTransformOp", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RTransformOp* REcmaTransformOp::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RTransformOp* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RTransformOp >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RTransformOp.%1(): "
                        "This object is not a RTransformOp").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RTransformOp* REcmaTransformOp::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RTransformOp* selfBase = getSelf(fName, context);
                RTransformOp* self = dynamic_cast<RTransformOp*>(selfBase);
                //return REcmaHelper::scriptValueTo<RTransformOp >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RTransformOp.%1(): "
                    "This object is not a RTransformOp").arg(fName),
                    context);
            }

            return self;
            


        }
         QScriptValue REcmaTransformOp::toScriptValueEnumType(QScriptEngine* engine, const RTransformOp::Type& value)
    
        {
            return QScriptValue(engine, (int)value);
        }
         void REcmaTransformOp::fromScriptValueEnumType(const QScriptValue& value, RTransformOp::Type& out)
    
        {
            out = qvariant_cast<RTransformOp::Type>(value.toVariant());
        }
        