<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core/math" filename="RMath.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RMATH_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RMATH_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMetaType&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cerrno&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RVector.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>M_PI</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>M_PI</name>        3.14159265358979323846264338327950288</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>M_PI_2</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>M_PI_2</name>      1.57079632679489661923132169163975144</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>M_PI_4</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>M_PI_4</name>      0.785398163397448309615660845819875721</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>M_LN10</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>M_LN10</name>      2.30258509299404568401799145468436421</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>M_LN2</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>M_LN2</name>       0.693147180559945309417232121458176568</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<comment type="line">// Somewhere in the guts of Visual C++ a macro 'max' is defined which</comment>
<comment type="line">// breaks std::numeric_limits&lt;double&gt;::max(). This fix is not correct</comment>
<comment type="line">// but good enough for now.</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RMAXDOUBLE</name> 1e300</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RMINDOUBLE</name> -1e300</cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RMAXDOUBLE</name> <name>std</name>::numeric_limits&lt;double&gt;::max()</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RMINDOUBLE</name> -std::numeric_limits&lt;double&gt;::max()</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>RMAXINT</name> <name>INT_MAX</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RMININT</name> <name>INT_MIN</name></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RNANDOUBLE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RNANDOUBLE</name> <name>std</name>::numeric_limits&lt;double&gt;::quiet_NaN()</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RINFDOUBLE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RINFDOUBLE</name> <name>std</name>::numeric_limits&lt;double&gt;::infinity()</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/**
 * Math functions.
 *
 * \ingroup math
 * \scriptable
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RMath</name> <block>{<private type="default">
</private><public>public:
    <function><type><name>static</name> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
    }</block></function>

    <function><type><name>static</name> <name>void</name></type> <name>uninit</name><parameter_list>()</parameter_list> <block>{
    }</block></function>

    <comment type="block">/**
     * Rounds the given double to the next int.
     */</comment>
    <function><type><name>static</name> <name>inline</name> <name>int</name></type> <name>mround</name><parameter_list>(<param><decl><type><name>double</name></type> <name>v</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GCC2x__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <return>return <expr>(<name>v</name>-<call><name>floor</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call>&lt;0.5 ? (<name>int</name>)<call><name>floor</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> : (<name>int</name>)<call><name>ceil</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call>)</expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <return>return <expr>(<name>int</name>) <call><name>round</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></function>

    <comment type="block">/**
     * Swaps two given values.
     * \nonscriptable
     */</comment>
    <template>template <parameter_list>&lt;<param><type>class</type> <name>T</name></param>&gt;</parameter_list>
    <function><type><name>static</name> <name>void</name></type> <name>swap</name><parameter_list>( <param><decl><type><name>T</name> &amp;</type><name>a</name></decl></param>, <param><decl><type><name>T</name> &amp;</type><name>b</name></decl></param>)</parameter_list> <block>{
        <function_decl><type><name>const</name> <name>T</name></type> <name>ttmp</name><parameter_list>(<param><decl><type><name>a</name></type></decl></param>)</parameter_list>;</function_decl>
        <expr_stmt><expr><name>a</name>=<name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name>=<name>ttmp</name></expr>;</expr_stmt>
    }</block></function></template>

    <function_decl><type><name>static</name> <name>double</name></type> <name>trunc</name><parameter_list>(<param><decl><type><name>double</name></type> <name>v</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>double</name></type> <name>pow</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>bool</name></type> <name>isNormal</name><parameter_list>(<param><decl><type><name>double</name></type> <name>v</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>bool</name></type> <name>isNaN</name><parameter_list>(<param><decl><type><name>double</name></type> <name>v</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>bool</name></type> <name>isInf</name><parameter_list>(<param><decl><type><name>double</name></type> <name>v</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>bool</name></type> <name>isSane</name><parameter_list>(<param><decl><type><name>double</name></type> <name>v</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>double</name></type> <name>eval</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>expression</name></decl></param>, <param><decl><type><name>bool</name>*</type> <name>ok</name> =<init> <expr><name>NULL</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QString</name></type> <name>getError</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>bool</name></type> <name>hasError</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="line">//static double stringToAngle(const QString&amp; str);</comment>
    <function_decl><type><name>static</name> <name>QString</name></type> <name>angleToString</name><parameter_list>(<param><decl><type><name>double</name></type> <name>a</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QString</name></type> <name>trimTrailingZeroes</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>s</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>double</name></type> <name>rad2deg</name><parameter_list>(<param><decl><type><name>double</name></type> <name>a</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>double</name></type> <name>deg2rad</name><parameter_list>(<param><decl><type><name>double</name></type> <name>a</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>double</name></type> <name>rad2gra</name><parameter_list>(<param><decl><type><name>double</name></type> <name>a</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>double</name></type> <name>gra2deg</name><parameter_list>(<param><decl><type><name>double</name></type> <name>a</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>bool</name></type> <name>isBetween</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>double</name></type> <name>limit1</name></decl></param>, <param><decl><type><name>double</name></type> <name>limit2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>inclusive</name></decl></param>, <param><decl><type><name>double</name></type> <name>tolerance</name> =<init> <expr><name><name>RS</name>::<name>PointTolerance</name></name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>int</name></type> <name>getGcd</name><parameter_list>(<param><decl><type><name>int</name></type> <name>a</name></decl></param>, <param><decl><type><name>int</name></type> <name>b</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>bool</name></type> <name>isAngleBetween</name><parameter_list>(<param><decl><type><name>double</name></type> <name>a</name></decl></param>, <param><decl><type><name>double</name></type> <name>a1</name></decl></param>, <param><decl><type><name>double</name></type> <name>a2</name></decl></param>, <param><decl><type><name>bool</name></type> <name>reversed</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>double</name></type> <name>getNormalizedAngle</name><parameter_list>(<param><decl><type><name>double</name></type> <name>a</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>double</name></type> <name>getRelativeAngle</name><parameter_list>(<param><decl><type><name>double</name></type> <name>a</name></decl></param>, <param><decl><type><name>double</name></type> <name>baseAngle</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>double</name></type> <name>getAngleDifference</name><parameter_list>(<param><decl><type><name>double</name></type> <name>a1</name></decl></param>, <param><decl><type><name>double</name></type> <name>a2</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>double</name></type> <name>getAngleDifference180</name><parameter_list>(<param><decl><type><name>double</name></type> <name>a1</name></decl></param>, <param><decl><type><name>double</name></type> <name>a2</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>double</name></type> <name>makeAngleReadable</name><parameter_list>(<param><decl><type><name>double</name></type> <name>angle</name></decl></param>, <param><decl><type><name>bool</name></type> <name>readable</name> =<init> <expr><name>true</name></expr></init></decl></param>, <param><decl><type><name>bool</name>*</type> <name>corrected</name> =<init> <expr><name>NULL</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>bool</name></type> <name>isAngleReadable</name><parameter_list>(<param><decl><type><name>double</name></type> <name>angle</name></decl></param>, <param><decl><type><name>double</name></type> <name>tolerance</name> =<init> <expr>0.01</expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>bool</name></type> <name>isSameDirection</name><parameter_list>(<param><decl><type><name>double</name></type> <name>dir1</name></decl></param>, <param><decl><type><name>double</name></type> <name>dir2</name></decl></param>, <param><decl><type><name>double</name></type> <name>tol</name> =<init> <expr><name><name>RS</name>::<name>AngleTolerance</name></name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>int</name></type> <name>absmod</name><parameter_list>(<param><decl><type><name>int</name></type> <name>a</name></decl></param>, <param><decl><type><name>int</name></type> <name>b</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>QString</name></type> <name>toFractionString</name><parameter_list>(<param><decl><type><name>double</name></type> <name>v</name></decl></param>, <param><decl><type><name>int</name></type> <name>maxDenominator</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>void</name></type> <name>toFraction</name><parameter_list>(<param><decl><type><name>double</name></type> <name>v</name></decl></param>, <param><decl><type><name>int</name></type> <name>maxDenominator</name></decl></param>, <param><decl><type><name>int</name>&amp;</type> <name>number</name></decl></param>, <param><decl><type><name>int</name>&amp;</type> <name>numerator</name></decl></param>, <param><decl><type><name>int</name>&amp;</type> <name>denominator</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>void</name></type> <name>simplify</name><parameter_list>(<param><decl><type><name>int</name></type> <name>numerator</name></decl></param>, <param><decl><type><name>int</name></type> <name>denominator</name></decl></param>, <param><decl><type><name>int</name>&amp;</type> <name>numeratorRes</name></decl></param>, <param><decl><type><name>int</name>&amp;</type> <name>denominatorRes</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>bool</name></type> <name>fuzzyCompare</name><parameter_list>(<param><decl><type><name>double</name></type> <name>v1</name></decl></param>, <param><decl><type><name>double</name></type> <name>v2</name></decl></param>, <param><decl><type><name>double</name></type> <name>tolerance</name> =<init> <expr><name><name>RS</name>::<name>PointTolerance</name></name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>bool</name></type> <name>fuzzyAngleCompare</name><parameter_list>(<param><decl><type><name>double</name></type> <name>v1</name></decl></param>, <param><decl><type><name>double</name></type> <name>v2</name></decl></param>, <param><decl><type><name>double</name></type> <name>tolerance</name> =<init> <expr><name><name>RS</name>::<name>AngleTolerance</name></name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>bool</name></type> <name>containsFuzzy</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name>&amp;</type> <name>values</name></decl></param>, <param><decl><type><name>double</name></type> <name>v</name></decl></param>, <param><decl><type><name>double</name></type> <name>tol</name> =<init> <expr><name><name>RS</name>::<name>PointTolerance</name></name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>double</name></type> <name>parseScale</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>scaleString</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>RVector</name></type> <name>parseCoordinate</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>coordinateString</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>relativeZero</name> =<init> <expr><name><name>RVector</name>::<name>nullVector</name></name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>static</name> <name>void</name></type> <name>getQuadRoots</name><parameter_list>(<param><decl><type><name>double</name></type> <name><name>p</name><index>[]</index></name></decl></param>, <param><decl><type><name>double</name></type> <name><name>r</name><index>[]</index><index>[<expr>5</expr>]</index></name></decl></param>)</parameter_list>;</function_decl>
    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>static</name> <name>void</name></type> <name>getCubicRoots</name><parameter_list>(<param><decl><type><name>double</name></type> <name><name>p</name><index>[]</index></name></decl></param>, <param><decl><type><name>double</name></type> <name><name>r</name><index>[]</index><index>[<expr>5</expr>]</index></name></decl></param>)</parameter_list>;</function_decl>
    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>static</name> <name>void</name></type> <name>getBiQuadRoots</name><parameter_list>(<param><decl><type><name>double</name></type> <name><name>p</name><index>[]</index></name></decl></param>, <param><decl><type><name>double</name></type> <name><name>r</name><index>[]</index><index>[<expr>5</expr>]</index></name></decl></param>)</parameter_list>;</function_decl>
</public><private>private:
    <decl_stmt><decl><type><name>static</name> <name>QString</name></type> <name>lastError</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>QString</name></type> <name>mathExt</name></decl>;</decl_stmt>
</private>}</block>;</class>

<expr_stmt><expr><call><name>Q_DECLARE_METATYPE</name><argument_list>(<argument><expr><name>RMath</name>*</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
