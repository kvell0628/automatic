<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core" filename="RDxfServices.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RDXFSERVICES_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RDXFSERVICES_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dxf_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RS.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RColor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RLineweight.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RLinetypePattern.h"</cpp:file></cpp:include>

<comment type="block">/**
 * \brief DXF support tools, mainly for QCAD 2 DXF imports.
 *
 * \ingroup core
 * \scriptable
 * \copyable
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RDxfServices</name> <block>{<private type="default">
</private><public>public:
    <enum>enum <name>Type</name> <block>{
        <expr><name>Unknown</name></expr>,
        <expr><name>String</name></expr>,
        <expr><name>Int</name></expr>,
        <expr><name>Float</name></expr>,
        <expr><name>Vector</name></expr>
    }</block>;</enum>

</public><public>public:
    <constructor_decl><name>RDxfServices</name><parameter_list>()</parameter_list>;</constructor_decl>

    <function_decl><type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>QString</name></type> <name>getSafeBlockName</name><parameter_list>(<param><decl><type><name>QString</name>&amp;</type> <name>blockName</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>fixBlockName</name><parameter_list>(<param><decl><type><name>QString</name>&amp;</type> <name>blockName</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>fixLayerName</name><parameter_list>(<param><decl><type><name>QString</name>&amp;</type> <name>layerName</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>fixFontName</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>fontName</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>fixVersion2String</name><parameter_list>(<param><decl><type><name>QString</name>&amp;</type> <name>str</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>fixDimensionLabel</name><parameter_list>(<param><decl><type><name>QString</name>&amp;</type> <name>text</name></decl></param>, <param><decl><type><name>QString</name>&amp;</type> <name>uTol</name></decl></param>, <param><decl><type><name>QString</name>&amp;</type> <name>lTol</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>detectVersion2Format</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>fileName</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><name>bool</name></type> <name>hasDIMZIN</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>version2GotDIMZIN</name></expr>;</return>
    }</block></function>
    <function><type><name>bool</name></type> <name>hasDIMAZIN</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>version2GotDIMAZIN</name></expr>;</return>
    }</block></function>
    <function><type><name>bool</name></type> <name>hasInvalidEllipse</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>version2GotInvalidEllipse</name></expr>;</return>
    }</block></function>
    <function><type><name>bool</name></type> <name>getVersion2Compatibility</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>dxflibMajorVersion</name>==2</expr>;</return>
    }</block></function>
    <function><type><name>bool</name></type> <name>getVersion3_1Compatibility</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr>(<name>dxflibMajorVersion</name>==3 &amp;&amp; <name>dxflibMinorVersion</name>==0) ||
               (<name>dxflibMajorVersion</name>==3 &amp;&amp; <name>dxflibMinorVersion</name>==1 &amp;&amp; <name>dxflibPatchVersion</name>==0)</expr>;</return>
    }</block></function>
    <function><type><name>int</name></type> <name>getMajorVersion</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>dxflibMajorVersion</name></expr>;</return>
    }</block></function>
    <function><type><name>int</name></type> <name>getMinorVersion</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>dxflibMinorVersion</name></expr>;</return>
    }</block></function>
    <function><type><name>int</name></type> <name>getPatchVersion</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>dxflibPatchVersion</name></expr>;</return>
    }</block></function>

    <function_decl><type><name>QString</name></type> <name>getVersion2LayerName</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>layerName</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getVersionBlockName</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>blockName</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getVersion2Font</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>handle</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getVersion2DimensionLabel</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>handle</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>QString</name></type> <name>collectVersion2Info</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>fileName</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>double</name></type> <name>getVersion2PatternAngle</name><parameter_list>(<param><decl><type><name>double</name></type> <name>angle</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>patternName</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>double</name></type> <name>getVersion2PatternScale</name><parameter_list>(<param><decl><type><name>double</name></type> <name>scale</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>patternName</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getVersion2PatternName</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>patternName</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>fixVersion2HatchData</name><parameter_list>(<param><decl><type><name>QString</name>&amp;</type> <name>patternName</name></decl></param>, <param><decl><type><name>double</name>&amp;</type> <name>angle</name></decl></param>, <param><decl><type><name>double</name>&amp;</type> <name>scale</name></decl></param>, <param><decl><type><name>bool</name></type> <name>solid</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function><type><name>QTextCodec</name>*</type> <name>getCodec</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>codec</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setCodec</name><parameter_list>(<param><decl><type><name>QTextCodec</name>*</type> <name>codec</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>this</name>-&gt;<name>codec</name> = <name>codec</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>static</name> <name>RColor</name></type> <name>attributesToColor</name><parameter_list>(<param><decl><type><name>int</name></type> <name>color</name></decl></param>, <param><decl><type><name>int</name></type> <name>color24</name></decl></param>, <param><decl><type><name>const</name> <name>double</name></type> <name><name>dxfColors</name><index>[]</index><index>[<expr>3</expr>]</index></name></decl></param>, <param><decl><type><name>bool</name></type> <name>forLayer</name>=<init><expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>static</name> <name>RColor</name></type> <name>numberToColor</name><parameter_list>(<param><decl><type><name>int</name></type> <name>num</name></decl></param>, <param><decl><type><name>const</name> <name>double</name></type> <name><name>dxfColors</name><index>[]</index><index>[<expr>3</expr>]</index></name></decl></param>, <param><decl><type><name>bool</name></type> <name>comp</name>=<init><expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>forLayer</name>=<init><expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>RColor</name></type> <name>numberToColor24</name><parameter_list>(<param><decl><type><name>int</name></type> <name>num</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name><name>RLineweight</name>::<name>Lineweight</name></name></type> <name>numberToWeight</name><parameter_list>(<param><decl><type><name>int</name></type> <name>num</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>int</name></type> <name>widthToNumber</name><parameter_list>(<param><decl><type><name><name>RLineweight</name>::<name>Lineweight</name></name></type> <name>w</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>int</name></type> <name>colorToNumber24</name><parameter_list>(<param><decl><type><name>const</name> <name>RColor</name>&amp;</type> <name>col</name></decl></param>)</parameter_list>;</function_decl>
    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>static</name> <name>int</name></type> <name>colorToNumber</name><parameter_list>(<param><decl><type><name>const</name> <name>RColor</name>&amp;</type> <name>col</name></decl></param>, <param><decl><type><name>const</name> <name>double</name></type> <name><name>dxfColors</name><index>[]</index><index>[<expr>3</expr>]</index></name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name><name>RS</name>::<name>KnownVariable</name></name></type> <name>stringToVariable</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>s</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QString</name></type> <name>variableToString</name><parameter_list>(<param><decl><type><name><name>RS</name>::<name>KnownVariable</name></name></type> <name>v</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>int</name></type> <name>getCodeForVariable</name><parameter_list>(<param><decl><type><name><name>RS</name>::<name>KnownVariable</name></name></type> <name>v</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name><name>RDxfServices</name>::<name>Type</name></name></type> <name>getTypeForVariable</name><parameter_list>(<param><decl><type><name><name>RS</name>::<name>KnownVariable</name></name></type> <name>v</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>bool</name></type> <name>isVariable2D</name><parameter_list>(<param><decl><type><name><name>RS</name>::<name>KnownVariable</name></name></type> <name>v</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>QString</name></type> <name>escapeUnicode</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>str</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>QString</name></type> <name>parseUnicode</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>str</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>void</name></type> <name>autoFixLinetypePattern</name><parameter_list>(<param><decl><type><name>RLinetypePattern</name>&amp;</type> <name>pattern</name></decl></param>)</parameter_list>;</function_decl>

</public><private>private:
    <decl_stmt><decl><type><name>bool</name></type> <name>version2GotDIMZIN</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>version2GotDIMAZIN</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>version2GotInvalidEllipse</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dxflibMajorVersion</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dxflibMinorVersion</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dxflibPatchVersion</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QMap<argument_list>&lt;<argument><name>QString</name></argument>, <argument><name>QString</name></argument>&gt;</argument_list></name></type> <name>version2BlockMapping</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QMap<argument_list>&lt;<argument><name>QString</name></argument>, <argument><name>QString</name></argument>&gt;</argument_list></name></type> <name>version2LayerMapping</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QMap<argument_list>&lt;<argument><name>QString</name></argument>, <argument><name>QString</name></argument>&gt;</argument_list></name></type> <name>version2TextFonts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QMap<argument_list>&lt;<argument><name>QString</name></argument>, <argument><name>QString</name></argument>&gt;</argument_list></name></type> <name>version2DimensionLabels</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QTextCodec</name>*</type> <name>codec</name></decl>;</decl_stmt>
</private>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RDxfServices::Type</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RDxfServices</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RDxfServices*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
