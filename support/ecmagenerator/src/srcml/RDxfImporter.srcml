<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./io/dxf" filename="RDxfImporter.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RDXFIMPORTER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RDXFIMPORTER_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dxf_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dxflib/src/dl_creationadapter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RDimensionEntity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RDxfServices.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RFileImporter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RHatchData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RLeaderData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RPolyline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RSpline.h"</cpp:file></cpp:include>

<class_decl>class <name>RDxfImporter</name>;</class_decl>
<class_decl>class <name>RImageEntity</name>;</class_decl>
<class_decl>class <name>RMessageHandler</name>;</class_decl>
<class_decl>class <name>RProgressHandler</name>;</class_decl>
<class_decl>class <name>RVector</name>;</class_decl>


<comment type="block">/**
 * Represents a text style.
 * \ingroup dxf
 */</comment>
<class>class <macro><name>QCADDXF_EXPORT</name></macro> <name>RDxfTextStyle</name> <block>{<private type="default">
</private><public>public:
    <constructor><name>RDxfTextStyle</name><parameter_list>()</parameter_list> <member_list>: <call><name>bold</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call>, <call><name>italic</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call> </member_list><block>{}</block></constructor>

    <decl_stmt><decl><type><name>QString</name></type> <name>font</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>bold</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>italic</name></decl>;</decl_stmt>
</public>}</block>;</class>


<comment type="block">/**
 * \brief Importer for the DXF format, based on the dxflib library.
 *
 * \ingroup dxf
 */</comment>
<class>class <macro><name>QCADDXF_EXPORT</name></macro> <name>RDxfImporter</name> <super>: <specifier>public</specifier> <name>RFileImporter</name>, <specifier>public</specifier> <name>DL_CreationAdapter</name></super> <block>{<private type="default">
</private><public>public:
    <constructor_decl><name>RDxfImporter</name><parameter_list>(<param><decl><type><name>RDocument</name>&amp;</type> <name>document</name></decl></param>,
        <param><decl><type><name>RMessageHandler</name>*</type> <name>messageHandler</name> =<init> <expr><name>NULL</name></expr></init></decl></param>, <param><decl><type><name>RProgressHandler</name>*</type> <name>progressHandler</name> =<init> <expr><name>NULL</name></expr></init></decl></param>)</parameter_list>;</constructor_decl>
    <destructor_decl><specifier>virtual</specifier> <name>~RDxfImporter</name><parameter_list>()</parameter_list>;</destructor_decl>

    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>importFile</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>fileName</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>nameFilter</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>processCodeValuePair</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>int</name></type> <name>groupCode</name></decl></param>, <param><decl><type><name>const</name> <name><name>std</name>::<name>string</name></name>&amp;</type> <name>groupValue</name></decl></param>)</parameter_list>;</function_decl>

</public><private>private:
    <comment type="line">// Methods from DL_CreationInterface:</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addLayer</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_LayerData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addLinetype</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_LinetypeData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addLinetypeDash</name><parameter_list>(<param><decl><type><name>double</name></type> <name>length</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addBlock</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_BlockData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>endBlock</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_PointData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addLine</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_LineData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addXLine</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_XLineData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addRay</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_RayData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addArc</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_ArcData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addEllipse</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_EllipseData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addCircle</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_CircleData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addPolyline</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_PolylineData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addVertex</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_VertexData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>endEntity</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>endSection</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addSpline</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_SplineData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addControlPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_ControlPointData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addFitPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_FitPointData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addKnot</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_KnotData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addInsert</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_InsertData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addSolid</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_SolidData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addTrace</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_TraceData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addTextStyle</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_StyleData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addMTextChunk</name><parameter_list>(<param><decl><type><name>const</name> <name><name>std</name>::<name>string</name></name>&amp;</type> <name>text</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addMText</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_MTextData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>RTextBasedData</name></type> <name>getTextBasedData</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_TextData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_TextData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addArcAlignedText</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_ArcAlignedTextData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addAttribute</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_AttributeData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>RDimensionData</name></type> <name>convDimensionData</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_DimensionData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addDimAlign</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_DimensionData</name>&amp;</type> <name>data</name></decl></param>, <param><decl><type><name>const</name> <name>DL_DimAlignedData</name>&amp;</type> <name>edata</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addDimLinear</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_DimensionData</name>&amp;</type> <name>data</name></decl></param>, <param><decl><type><name>const</name> <name>DL_DimLinearData</name>&amp;</type> <name>edata</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addDimRadial</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_DimensionData</name>&amp;</type> <name>data</name></decl></param>, <param><decl><type><name>const</name> <name>DL_DimRadialData</name>&amp;</type> <name>edata</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addDimDiametric</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_DimensionData</name>&amp;</type> <name>data</name></decl></param>, <param><decl><type><name>const</name> <name>DL_DimDiametricData</name>&amp;</type> <name>edata</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addDimAngular</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_DimensionData</name>&amp;</type> <name>data</name></decl></param>, <param><decl><type><name>const</name> <name>DL_DimAngular2LData</name>&amp;</type> <name>edata</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addDimAngular3P</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_DimensionData</name>&amp;</type> <name>data</name></decl></param>, <param><decl><type><name>const</name> <name>DL_DimAngular3PData</name>&amp;</type> <name>edata</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addDimOrdinate</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_DimensionData</name>&amp;</type> <name>data</name></decl></param>, <param><decl><type><name>const</name> <name>DL_DimOrdinateData</name>&amp;</type> <name>edata</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addLeader</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_LeaderData</name> &amp;</type><name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addLeaderVertex</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_LeaderVertexData</name> &amp;</type><name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addHatch</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_HatchData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addHatchLoop</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_HatchLoopData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addHatchEdge</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_HatchEdgeData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addImage</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_ImageData</name> &amp;</type><name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>linkImage</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_ImageDefData</name> &amp;</type><name>data</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addXRecord</name><parameter_list>(<param><decl><type><name>const</name> <name><name>std</name>::<name>string</name></name>&amp;</type> <name>handle</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addXRecordString</name><parameter_list>(<param><decl><type><name>int</name></type> <name>code</name></decl></param>, <param><decl><type><name>const</name> <name><name>std</name>::<name>string</name></name>&amp;</type> <name>value</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addXRecordReal</name><parameter_list>(<param><decl><type><name>int</name></type> <name>code</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addXRecordInt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>code</name></decl></param>, <param><decl><type><name>int</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addXRecordBool</name><parameter_list>(<param><decl><type><name>int</name></type> <name>code</name></decl></param>, <param><decl><type><name>bool</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addXDataApp</name><parameter_list>(<param><decl><type><name>const</name> <name><name>std</name>::<name>string</name></name>&amp;</type> <name>appId</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addXDataString</name><parameter_list>(<param><decl><type><name>int</name></type> <name>code</name></decl></param>, <param><decl><type><name>const</name> <name><name>std</name>::<name>string</name></name>&amp;</type> <name>value</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addXDataReal</name><parameter_list>(<param><decl><type><name>int</name></type> <name>code</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addXDataInt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>code</name></decl></param>, <param><decl><type><name>int</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addDictionary</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_DictionaryData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addDictionaryEntry</name><parameter_list>(<param><decl><type><name>const</name> <name>DL_DictionaryEntryData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setVariableVector</name><parameter_list>(<param><decl><type><name>const</name> <name><name>std</name>::<name>string</name></name>&amp;</type> <name>key</name></decl></param>, <param><decl><type><name>double</name></type> <name>v1</name></decl></param>, <param><decl><type><name>double</name></type> <name>v2</name></decl></param>, <param><decl><type><name>double</name></type> <name>v3</name></decl></param>, <param><decl><type><name>int</name></type> <name>code</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setVariableString</name><parameter_list>(<param><decl><type><name>const</name> <name><name>std</name>::<name>string</name></name>&amp;</type> <name>key</name></decl></param>, <param><decl><type><name>const</name> <name><name>std</name>::<name>string</name></name>&amp;</type> <name>value</name></decl></param>, <param><decl><type><name>int</name></type> <name>code</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setVariableInt</name><parameter_list>(<param><decl><type><name>const</name> <name><name>std</name>::<name>string</name></name>&amp;</type> <name>key</name></decl></param>, <param><decl><type><name>int</name></type> <name>value</name></decl></param>, <param><decl><type><name>int</name></type> <name>code</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setVariableDouble</name><parameter_list>(<param><decl><type><name>const</name> <name><name>std</name>::<name>string</name></name>&amp;</type> <name>key</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>int</name></type> <name>code</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>QString</name></type> <name>decode</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>str</name></decl></param>)</parameter_list>;</function_decl>

</private><private>private:
    <function_decl><type><name>static</name> <name>QString</name></type> <name>getEncoding</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>str</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>importEntity</name><parameter_list>(<param><decl><type><name>QSharedPointer<argument_list>&lt;<argument><name>REntity</name></argument>&gt;</argument_list></name></type> <name>entity</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>QString</name></type> <name>getXDataString</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>appId</name></decl></param>, <param><decl><type><name>int</name></type> <name>code</name></decl></param>, <param><decl><type><name>int</name></type> <name>pos</name>=<init><expr>0</expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> <name>getXDataInt</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>appId</name></decl></param>, <param><decl><type><name>int</name></type> <name>code</name></decl></param>, <param><decl><type><name>int</name></type> <name>pos</name>=<init><expr>0</expr></init></decl></param>)</parameter_list>;</function_decl>

</private><private>private:
    <decl_stmt><decl><type><name>QString</name></type> <name>fileName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RDxfServices</name></type> <name>dxfServices</name></decl>;</decl_stmt>
    <comment type="line">// list of locked layers. layers are locked after importing all entities:</comment>
    <decl_stmt><decl><type><name>QStringList</name></type> <name>lockedLayers</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>RPolyline</name></type> <name>polyline</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>polylinePlineGen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RSpline</name></type> <name>spline</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RLeaderData</name></type> <name>leader</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>leaderArrowHead</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RHatchData</name></type> <name>hatch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QByteArray</name></type> <name>mtext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QMap<argument_list>&lt;<argument><name>QString</name></argument>, <argument><name>RDxfTextStyle</name></argument>&gt;</argument_list></name></type> <name>textStyles</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QMultiMap<argument_list>&lt;<argument><name>int</name></argument>, <argument><name><name>RObject</name>::<name>Id</name></name></argument>&gt;</argument_list></name></type> <name>images</name></decl>;</decl_stmt>
    <comment type="line">// pattern for linetype</comment>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name></type> <name>pattern</name></decl>;</decl_stmt>

    <comment type="line">// Current app id for XData:</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>xDataAppId</name></decl>;</decl_stmt>
    <comment type="line">// AppID -&gt; list of code / value pairs</comment>
    <decl_stmt><decl><type><name>QMap<argument_list>&lt;<argument><name>QString</name></argument>, <argument><name>QList<argument_list>&lt;<argument><name>QPair<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>QVariant</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>xData</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>qcadDictHandle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>inDict</name></decl>;</decl_stmt>
    <comment type="line">// Dictionary handles -&gt; names</comment>
    <decl_stmt><decl><type><name>QMap<argument_list>&lt;<argument><name>QString</name></argument>, <argument><name>QString</name></argument>&gt;</argument_list></name></type> <name>qcadDict</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>variableKey</name></decl>;</decl_stmt>
</private>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RDxfImporter*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>DL_CreationAdapter*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
