<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core" filename="RSpatialIndex.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RSPATIALINDEX_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RSPATIALINDEX_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"core_global.h"</cpp:file></cpp:include>

<comment type="line">// MSVC &lt;= 2008 does not have this:</comment>
<comment type="line">//#include &lt;stdint.h&gt;</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSet&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QList&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RBox.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RDebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RMath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RRequireHeap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RSpatialIndexVisitor.h"</cpp:file></cpp:include>

<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RSpatialIndexDebugVisitor</name> <super>: <specifier>public</specifier> <name>RSpatialIndexVisitor</name></super> <block>{<private type="default">
</private><public>public:
    <constructor><name>RSpatialIndexDebugVisitor</name><parameter_list>(<param><decl><type><name>QDebug</name></type> <name>dbg</name></decl></param>)</parameter_list> <member_list>: <call><name>dbg</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call> </member_list><block>{}</block></constructor>
    <destructor><specifier>virtual</specifier> <name>~RSpatialIndexDebugVisitor</name><parameter_list>()</parameter_list> <block>{}</block></destructor>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>visitData</name><parameter_list>(
        <param><decl><type><name>int</name></type> <name>id</name></decl></param>,
        <param><decl><type><name>int</name></type> <name>pos</name></decl></param>,
        <param><decl><type><name>double</name></type> <name>x1</name></decl></param>, <param><decl><type><name>double</name></type> <name>y1</name></decl></param>, <param><decl><type><name>double</name></type> <name>z1</name></decl></param>,
        <param><decl><type><name>double</name></type> <name>x2</name></decl></param>, <param><decl><type><name>double</name></type> <name>y2</name></decl></param>, <param><decl><type><name>double</name></type> <name>z2</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><name>virtual</name> <name>void</name></type> <name>visitNode</name><parameter_list>(
        <param><decl><type><name>double</name></type> <name>x1</name></decl></param>, <param><decl><type><name>double</name></type> <name>y1</name></decl></param>, <param><decl><type><name>double</name></type> <name>z1</name></decl></param>,
        <param><decl><type><name>double</name></type> <name>x2</name></decl></param>, <param><decl><type><name>double</name></type> <name>y2</name></decl></param>, <param><decl><type><name>double</name></type> <name>z2</name></decl></param>)</parameter_list> <block>{
        <macro><name>Q_UNUSED</name><argument_list>(<argument>x1</argument>)</argument_list></macro>
        <macro><name>Q_UNUSED</name><argument_list>(<argument>y1</argument>)</argument_list></macro>
        <macro><name>Q_UNUSED</name><argument_list>(<argument>z1</argument>)</argument_list></macro>
        <macro><name>Q_UNUSED</name><argument_list>(<argument>x2</argument>)</argument_list></macro>
        <macro><name>Q_UNUSED</name><argument_list>(<argument>y2</argument>)</argument_list></macro>
        <macro><name>Q_UNUSED</name><argument_list>(<argument>z2</argument>)</argument_list></macro>
    }</block></function>

    <decl_stmt><decl><type><name>QDebug</name></type> <name>dbg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>QPair<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>int</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>matches</name></decl>;</decl_stmt>
</public>}</block>;</class>


<comment type="block">/**
 * \brief Abstract base class for spatial index implementations.
 *
 * \ingroup core
 * \scriptable
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RSpatialIndex</name><super>: <specifier>public</specifier> <name>RRequireHeap</name></super> <block>{<private type="default">
</private><public>public:
    <constructor><name>RSpatialIndex</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <destructor><specifier>virtual</specifier> <name>~RSpatialIndex</name><parameter_list>()</parameter_list> <block>{
    }</block></destructor>

    <function_decl><type><name>static</name> <name>qint64</name></type> <name>getSIId</name><parameter_list>(<param><decl><type><name>int</name></type> <name>id</name></decl></param>, <param><decl><type><name>int</name></type> <name>pos</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>int</name></type> <name>getId</name><parameter_list>(<param><decl><type><name>qint64</name></type> <name>siid</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>int</name></type> <name>getPos</name><parameter_list>(<param><decl><type><name>qint64</name></type> <name>siid</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>RSpatialIndex</name>*</type> <name>create</name><parameter_list>()</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>bulkLoad</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>int</name></argument>&gt;</argument_list></name>&amp;</type> <name>ids</name></decl></param>, <param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>QList<argument_list>&lt;<argument><name>RBox</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name>&amp;</type> <name>bbs</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>bulkLoadSimple</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>int</name></argument>&gt;</argument_list></name>&amp;</type> <name>ids</name></decl></param>, <param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>RBox</name></argument>&gt;</argument_list></name>&amp;</type> <name>bbs</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/**
     * Adds a new entry into this spatial index.
     */</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addToIndex</name><parameter_list>(
        <param><decl><type><name>int</name></type> <name>id</name></decl></param>, <param><decl><type><name>int</name></type> <name>pos</name></decl></param>,
        <param><decl><type><name>double</name></type> <name>x1</name></decl></param>, <param><decl><type><name>double</name></type> <name>y1</name></decl></param>, <param><decl><type><name>double</name></type> <name>z1</name></decl></param>,
        <param><decl><type><name>double</name></type> <name>x2</name></decl></param>, <param><decl><type><name>double</name></type> <name>y2</name></decl></param>, <param><decl><type><name>double</name></type> <name>z2</name></decl></param>
    )</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <comment type="block">/**
     * Adds a new entry into this spatial index.
     */</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addToIndex</name><parameter_list>(
        <param><decl><type><name>int</name></type> <name>id</name></decl></param>, <param><decl><type><name>int</name></type> <name>pos</name></decl></param>,
        <param><decl><type><name>const</name> <name>RBox</name>&amp;</type> <name>bb</name></decl></param>
    )</parameter_list>;</function_decl>

    <comment type="block">/**
     * Adds a new entry at multiple positions into this 
     * spatial index.
     */</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>addToIndex</name><parameter_list>(
        <param><decl><type><name>int</name></type> <name>id</name></decl></param>,
        <param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>RBox</name></argument>&gt;</argument_list></name>&amp;</type> <name>bbs</name></decl></param>
    )</parameter_list>;</function_decl>

    <comment type="block">/**
     * Removes the entry with the given ID from this spatial index.
     */</comment>
    <comment type="line">//virtual void removeFromIndex(int id) = 0;</comment>

    <comment type="block">/**
     * Removes the entry with the given ID from this spatial index.
     * the bounding box is provided for fast lookup.
     */</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>removeFromIndex</name><parameter_list>(
            <param><decl><type><name>int</name></type> <name>id</name></decl></param>, <param><decl><type><name>int</name></type> <name>pos</name></decl></param>,
            <param><decl><type><name>double</name></type> <name>x1</name></decl></param>, <param><decl><type><name>double</name></type> <name>y1</name></decl></param>, <param><decl><type><name>double</name></type> <name>z1</name></decl></param>,
            <param><decl><type><name>double</name></type> <name>x2</name></decl></param>, <param><decl><type><name>double</name></type> <name>y2</name></decl></param>, <param><decl><type><name>double</name></type> <name>z2</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <comment type="block">/**
     * Removes the entry with the given ID from this spatial index.
     * the bounding box is provided for faster lookup.
     */</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>removeFromIndex</name><parameter_list>(<param><decl><type><name>int</name></type> <name>id</name></decl></param>, <param><decl><type><name>int</name></type> <name>pos</name></decl></param>, <param><decl><type><name>const</name> <name>RBox</name>&amp;</type> <name>bb</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/**
     * Removes the entry with the given ID from this spatial index.
     * the bounding boxes are provided for faster lookup.
     */</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>removeFromIndex</name><parameter_list>(<param><decl><type><name>int</name></type> <name>id</name></decl></param>, <param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>RBox</name></argument>&gt;</argument_list></name>&amp;</type> <name>bb</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/**
     * Queries the index for all items that are completely inside or intersect
     * with the given box x1,y1,z1,x2,y2,z2.
     *
     * \param x1 lower region boundary of the first dimension.
     * \param y1 lower region boundary of the second dimension.
     * \param z1 lower region boundary of the third dimension.
     * \param x2 higher region boundary of the first dimension.
     * \param y2 higher region boundary of the second dimension.
     * \param z2 higher region boundary of the third dimension.
     * \param dataVisitor The item data is handed back to the caller over
     *      this object (visitor pattern).
     * \return map with IDs as keys and positions as values
     */</comment>
    <function_decl><type><name>virtual</name> <name>QMap<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>QSet<argument_list>&lt;<argument><name>int</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>queryIntersected</name><parameter_list>(
        <param><decl><type><name>double</name></type> <name>x1</name></decl></param>, <param><decl><type><name>double</name></type> <name>y1</name></decl></param>, <param><decl><type><name>double</name></type> <name>z1</name></decl></param>,
        <param><decl><type><name>double</name></type> <name>x2</name></decl></param>, <param><decl><type><name>double</name></type> <name>y2</name></decl></param>, <param><decl><type><name>double</name></type> <name>z2</name></decl></param>,
        <param><decl><type><name>RSpatialIndexVisitor</name>*</type> <name>dataVisitor</name>=<init><expr><name>NULL</name></expr></init></decl></param>
    )</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <comment type="block">/**
     * Queries the index for all items that are completely inside or intersect
     * with the given box.
     */</comment>
    <function_decl><type><name>virtual</name> <name>QMap<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>QSet<argument_list>&lt;<argument><name>int</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>queryIntersected</name><parameter_list>(
        <param><decl><type><name>const</name> <name>RBox</name>&amp;</type> <name>b</name></decl></param>,
        <param><decl><type><name>RSpatialIndexVisitor</name>*</type> <name>dataVisitor</name>=<init><expr><name>NULL</name></expr></init></decl></param>
    )</parameter_list>;</function_decl>

    <comment type="block">/**
     * Queries the index for all items that are completely inside the given
     * box x1,y1,z1,x2,y2,z2.
     *
     * \param x1 lower region boundary of the first dimension.
     * \param y1 lower region boundary of the second dimension.
     * \param z1 lower region boundary of the third dimension.
     * \param x2 higher region boundary of the first dimension.
     * \param y2 higher region boundary of the second dimension.
     * \param z2 higher region boundary of the third dimension.
     * \param dataVisitor The item data is handed back to the caller over
     *      this object (visitor pattern).
     */</comment>
    <function_decl><type><name>virtual</name> <name>QMap<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>QSet<argument_list>&lt;<argument><name>int</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>queryContained</name><parameter_list>(
        <param><decl><type><name>double</name></type> <name>x1</name></decl></param>, <param><decl><type><name>double</name></type> <name>y1</name></decl></param>, <param><decl><type><name>double</name></type> <name>z1</name></decl></param>,
        <param><decl><type><name>double</name></type> <name>x2</name></decl></param>, <param><decl><type><name>double</name></type> <name>y2</name></decl></param>, <param><decl><type><name>double</name></type> <name>z2</name></decl></param>,
        <param><decl><type><name>RSpatialIndexVisitor</name>*</type> <name>dataVisitor</name>=<init><expr><name>NULL</name></expr></init></decl></param>
    )</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <comment type="block">/**
     * Queries the index for all items that are completely inside the given
     * box.
     */</comment>
    <function_decl><type><name>virtual</name> <name>QMap<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>QSet<argument_list>&lt;<argument><name>int</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>queryContained</name><parameter_list>(
        <param><decl><type><name>const</name> <name>RBox</name>&amp;</type> <name>b</name></decl></param>,
        <param><decl><type><name>RSpatialIndexVisitor</name>*</type> <name>dataVisitor</name>=<init><expr><name>NULL</name></expr></init></decl></param>
    )</parameter_list>;</function_decl>

    <comment type="block">/**
     * Queries the index for closest neighbor items.
     *
     * \param x1 position of the first dimension.
     * \param y1 position of the second dimension.
     * \param z1 position of the third dimension.
     * \param dataVisitor The item data is handed back to the caller over
     *      this object (visitor pattern).
     */</comment>
    <function_decl><type><name>virtual</name> <name>QMap<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>QSet<argument_list>&lt;<argument><name>int</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>queryNearestNeighbor</name><parameter_list>(
        <param><decl><type><name>unsigned</name> <name>int</name></type> <name>k</name></decl></param>,
        <param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>, <param><decl><type><name>double</name></type> <name>z</name></decl></param>,
        <param><decl><type><name>RSpatialIndexVisitor</name>*</type> <name>dataVisitor</name>=<init><expr><name>NULL</name></expr></init></decl></param>
    )</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>QPair<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>int</name></argument>&gt;</argument_list></name></type> <name>queryNearestNeighbor</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>, <param><decl><type><name>double</name></type> <name>z</name></decl></param>)</parameter_list>;</function_decl>

</public><protected>protected:
    <decl_stmt><decl><type><name>int</name></type> <name>idCounter</name></decl>;</decl_stmt>
</protected>}</block>;</class>

<function_decl><type><name>QCADCORE_EXPORT</name> <name>QDebug</name></type> <name>operator&lt;&lt;</name><parameter_list>(<param><decl><type><name>QDebug</name></type> <name>dbg</name></decl></param>, <param><decl><type><name>RSpatialIndex</name>&amp;</type> <name>si</name></decl></param>)</parameter_list>;</function_decl>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RSpatialIndex*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>const RSpatialIndex*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
