<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core" filename="RGraphicsScene.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RGRAPHICSSCENE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RGRAPHICSSCENE_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QCursor&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDebug&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RDebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"REntity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RExporter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RGraphicsView.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RGraphicsSceneDrawable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RMouseEvent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RSpatialIndex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RTabletEvent.h"</cpp:file></cpp:include>
<comment type="line">//#include "RTextLabel.h"</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RWheelEvent.h"</cpp:file></cpp:include>

<class_decl>class <name>RDocumentInterface</name>;</class_decl>



<comment type="block">/**
 * Abstract base class for all graphics scenes.
 * A graphics scene is an exporter that exports entities into
 * something that can be shown in a view (painter paths,
 * triangles, OpenGL lists, ...).
 *
 * Graphics scenes store a map of reference points of all entities
 * that are currently selected. This information is stored at
 * the scene level and not at the document interface level because
 * a scene that shows for example a wall from the side may show
 * different reference points than a scene that shows the same
 * wall from the top.
 *
 * \ref RGraphicsView "graphics views".
 *
 * \ingroup core
 * \scriptable
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RGraphicsScene</name> <super>: <specifier>public</specifier> <name>RExporter</name></super> <block>{<private type="default">
</private><public>public:
    <constructor_decl><name>RGraphicsScene</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>&amp;</type> <name>documentInterface</name></decl></param>)</parameter_list>;</constructor_decl>
    <destructor_decl><specifier>virtual</specifier> <name>~RGraphicsScene</name><parameter_list>()</parameter_list>;</destructor_decl>

    <function_decl><type><name>RDocumentInterface</name>&amp;</type> <name>getDocumentInterface</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>QList<argument_list>&lt;<argument><name>RGraphicsView</name>*</argument>&gt;</argument_list></name></type> <name>getGraphicsViews</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block">/**
     * Override for performance reasons, we don't need settings to be
     * exported for graphics scenes.
     */</comment>
    <function><type><name>virtual</name> <name>bool</name></type> <name>exportDocumentSettings</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></function>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>regenerate</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>undone</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>regenerate</name><parameter_list>(<param><decl><type><name>QSet<argument_list>&lt;<argument><name><name>REntity</name>::<name>Id</name></name></argument>&gt;</argument_list></name>&amp;</type> <name>affectedEntities</name></decl></param>, <param><decl><type><name>bool</name></type> <name>updateViews</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>updateSelectionStatus</name><parameter_list>(<param><decl><type><name>QSet<argument_list>&lt;<argument><name><name>REntity</name>::<name>Id</name></name></argument>&gt;</argument_list></name>&amp;</type> <name>affectedEntities</name></decl></param>, <param><decl><type><name>bool</name></type> <name>updateViews</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>regenerateViews</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>force</name>=<init><expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>regenerateViews</name><parameter_list>(<param><decl><type><name>QSet<argument_list>&lt;<argument><name><name>RObject</name>::<name>Id</name></name></argument>&gt;</argument_list></name>&amp;</type> <name>affectedEntities</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>repaintViews</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setCursor</name><parameter_list>(<param><decl><type><name>const</name> <name>QCursor</name>&amp;</type> <name>cursor</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>handleTerminateEvent</name><parameter_list>(<param><decl><type><name>RTerminateEvent</name>&amp;</type> <name>event</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>handleKeyPressEvent</name><parameter_list>(<param><decl><type><name>QKeyEvent</name>&amp;</type> <name>event</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>handleKeyReleaseEvent</name><parameter_list>(<param><decl><type><name>QKeyEvent</name>&amp;</type> <name>event</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>handleMouseMoveEvent</name><parameter_list>(<param><decl><type><name>RMouseEvent</name>&amp;</type> <name>event</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>handleMousePressEvent</name><parameter_list>(<param><decl><type><name>RMouseEvent</name>&amp;</type> <name>event</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>handleMouseReleaseEvent</name><parameter_list>(<param><decl><type><name>RMouseEvent</name>&amp;</type> <name>event</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>handleMouseDoubleClickEvent</name><parameter_list>(<param><decl><type><name>RMouseEvent</name>&amp;</type> <name>event</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>handleWheelEvent</name><parameter_list>(<param><decl><type><name>RWheelEvent</name>&amp;</type> <name>event</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>handleTabletEvent</name><parameter_list>(<param><decl><type><name>RTabletEvent</name>&amp;</type> <name>event</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>handleSwipeGestureEvent</name><parameter_list>(<param><decl><type><name>QSwipeGesture</name>&amp;</type> <name>gesture</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>handlePanGestureEvent</name><parameter_list>(<param><decl><type><name>QPanGesture</name>&amp;</type> <name>gesture</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>handlePinchGestureEvent</name><parameter_list>(<param><decl><type><name>QPinchGesture</name>&amp;</type> <name>gesture</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>registerView</name><parameter_list>(<param><decl><type><name>RGraphicsView</name>*</type> <name>view</name></decl></param>, <param><decl><type><name>bool</name></type> <name>regen</name>=<init><expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>unregisterView</name><parameter_list>(<param><decl><type><name>RGraphicsView</name>*</type> <name>view</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>beginPreview</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>endPreview</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>clearPreview</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>isPreviewEmpty</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><name>virtual</name> <name>void</name></type> <name>addToPreview</name><parameter_list>(<param><decl><type><name><name>REntity</name>::<name>Id</name></name></type> <name>entityId</name></decl></param>, <param><decl><type><name>QList<argument_list>&lt;<argument><name>RGraphicsSceneDrawable</name></argument>&gt;</argument_list></name>&amp;</type> <name>drawables</name></decl></param>)</parameter_list> <block>{
        <macro><name>Q_UNUSED</name><argument_list>(<argument>entityId</argument>)</argument_list></macro>
        <macro><name>Q_UNUSED</name><argument_list>(<argument>drawables</argument>)</argument_list></macro>
    }</block></function>
    <function><type><name>virtual</name> <name>void</name></type> <name>addToPreview</name><parameter_list>(<param><decl><type><name><name>REntity</name>::<name>Id</name></name></type> <name>entityId</name></decl></param>, <param><decl><type><name>RGraphicsSceneDrawable</name>&amp;</type> <name>drawable</name></decl></param>)</parameter_list> <block>{
        <macro><name>Q_UNUSED</name><argument_list>(<argument>entityId</argument>)</argument_list></macro>
        <macro><name>Q_UNUSED</name><argument_list>(<argument>drawable</argument>)</argument_list></macro>
    }</block></function>

    <function><type><name>void</name></type> <name>beginNoColorMode</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>colorMode</name> = <name>false</name></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>void</name></type> <name>endNoColorMode</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>colorMode</name> = <name>true</name></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>bool</name></type> <name>getNoColorMode</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr>!<name>colorMode</name></expr>;</return>
    }</block></function>

    <function_decl><type><name>RRefPoint</name></type> <name>getHighlightedReferencePoint</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block">/**
     * Highlights the given entity. This is typically used to highlight entities
     * when the mouse hovers over them.
     */</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>highlightEntity</name><parameter_list>(<param><decl><type><name>REntity</name>&amp;</type> <name>entity</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>highlightReferencePoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RRefPoint</name>&amp;</type> <name>position</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>selectReferencePoints</name><parameter_list>(<param><decl><type><name>const</name> <name>RBox</name>&amp;</type> <name>box</name></decl></param>, <param><decl><type><name>bool</name></type> <name>add</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportCurrentEntity</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>preview</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>forceSelected</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>unexportEntity</name><parameter_list>(<param><decl><type><name><name>REntity</name>::<name>Id</name></name></type> <name>entityId</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>int</name></type> <name>countReferencePoints</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function><type><name>QMap<argument_list>&lt;<argument><name><name>REntity</name>::<name>Id</name></name></argument>, <argument><name>QList<argument_list>&lt;<argument><name>RRefPoint</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name>&amp;</type> <name>getReferencePoints</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>referencePoints</name></expr>;</return>
    }</block></function>

    <function_decl><type><name>bool</name></type> <name>hasSelectedReferencePoints</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

<comment type="line">//    virtual bool isVisualExporter() const {</comment>
<comment type="line">//        return true;</comment>
<comment type="line">//    }</comment>

    <function><type><name>virtual</name> <name>void</name></type> <name>dump</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>qDebug</name><argument_list>()</argument_list></call> &lt;&lt; *<name>this</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>friend</name> <name>QDebug</name></type> <name>operator&lt;&lt;</name><parameter_list>(<param><decl><type><name>QDebug</name></type> <name>dbg</name></decl></param>, <param><decl><type><name>RGraphicsScene</name>&amp;</type> <name>gs</name></decl></param>)</parameter_list>;</function_decl>

</public><protected>protected:
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportReferencePoints</name><parameter_list>()</parameter_list>;</function_decl>

</protected><protected>protected:
    <decl_stmt><decl><type><name>RDocumentInterface</name>&amp;</type> <name>documentInterface</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RGraphicsView</name>*</argument>&gt;</argument_list></name></type> <name>views</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>exportToPreview</name></decl>;</decl_stmt>
    <comment type="line">// enable / disable color mode:</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>colorMode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>previewIsEmpty</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RRefPoint</name></type> <name>highlightedReferencePoint</name></decl>;</decl_stmt>

    <comment type="block">/**
     * Internal map of reference points for every selected entity in the scene.
     * Used for drawing reference points.
     */</comment>
    <decl_stmt><decl><type><name>QMap<argument_list>&lt;<argument><name><name>REntity</name>::<name>Id</name></name></argument>, <argument><name>QList<argument_list>&lt;<argument><name>RRefPoint</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>referencePoints</name></decl>;</decl_stmt>

</protected><private>private:
    <decl_stmt><decl><type><name>bool</name></type> <name>deleting</name></decl>;</decl_stmt>
</private>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QList&lt;RGraphicsScene*&gt;</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RGraphicsScene*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
