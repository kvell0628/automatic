<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core" filename="RPropertyTypeId.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RPROPERTYTYPEID_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RPROPERTYTYPEID_H_</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;typeinfo&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMap&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMetaType&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSet&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSharedPointer&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RDebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RS.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RPropertyAttributes.h"</cpp:file></cpp:include>

<comment type="block">/**
 * Represents unique property type IDs. Every property type an object can have
 * has such an unique ID.
 *
 * E.g. all objects of type car may have a property
 * type called brand. This property type is uniquely identified by an instance
 * of this class. All instances of this class are automatically unique.
 *
 * \code
 * class QCADCORE_EXPORT Car {
 * public:
 * static RPropertyTypeId propertyBrand;
 * }
 *
 * RPropertyTypeId Car::propertyBrand(typeid(Car));
 * \endcode
 *
 * \ingroup core
 *
 * \scriptable
 * \copyable
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RPropertyTypeId</name> <block>{<private type="default">
</private><public>public:
    <comment type="block">/**
     * \ nonscriptable
     */</comment>
    <comment type="line">//RPropertyTypeId(const std::type_info&amp; classInfo, const QString&amp; groupTitle,</comment>
    <comment type="line">//      const QString&amp; title);</comment>
    <comment type="block">/**
     * \ nonscriptable
     */</comment>
    <comment type="line">//RPropertyTypeId(const std::type_info&amp; classInfo, const RPropertyTypeId&amp; other);</comment>

    <constructor_decl><name>RPropertyTypeId</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>customPropertyTitle</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>customPropertyName</name></decl></param>)</parameter_list>;</constructor_decl>
    <constructor_decl><name>RPropertyTypeId</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>customPropertyName</name></decl></param>)</parameter_list>;</constructor_decl>

    <constructor_decl><name>RPropertyTypeId</name><parameter_list>(<param><decl><type><name>const</name> <name>RPropertyTypeId</name>&amp;</type> <name>other</name></decl></param>)</parameter_list>;</constructor_decl>
    <constructor_decl><name>RPropertyTypeId</name><parameter_list>(<param><decl><type><name>long</name> <name>int</name></type> <name>id</name> =<init> <expr><name>INVALID_ID</name></expr></init></decl></param>)</parameter_list>;</constructor_decl>

    <function_decl><type><name>long</name> <name>int</name></type> <name>getId</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setId</name><parameter_list>(<param><decl><type><name>long</name> <name>int</name></type> <name>id</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getCustomPropertyTitle</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setCustomPropertyTitle</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>t</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getCustomPropertyName</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setCustomPropertyName</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>n</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>bool</name></type> <name>isValid</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>isCustom</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <comment type="line">//bool isBlockAttribute() const;</comment>

<comment type="line">//    QString getBlockAttributeTag() const;</comment>
<comment type="line">//    QString getBlockAttributePrompt() const;</comment>
<comment type="line">//    QString getBlockAttributeId() const;</comment>

    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>void</name></type> <name>generateId</name><parameter_list>(<param><decl><type><name>const</name> <name><name>std</name>::<name>type_info</name></name>&amp;</type> <name>classInfo</name></decl></param>,
        <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>groupTitle</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>title</name></decl></param>, <param><decl><type><name>bool</name></type> <name>forceNew</name> =<init> <expr><name>false</name></expr></init></decl></param>,
        <param><decl><type><name><name>RPropertyAttributes</name>::<name>Options</name></name></type> <name>options</name> =<init> <expr><name><name>RPropertyAttributes</name>::<name>NoOptions</name></name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>void</name></type> <name>generateId</name><parameter_list>(<param><decl><type><name>const</name> <name><name>std</name>::<name>type_info</name></name>&amp;</type> <name>classInfo</name></decl></param>, 
        <param><decl><type><name>const</name> <name>RPropertyTypeId</name>&amp;</type> <name>other</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>static</name> <name>QSet<argument_list>&lt;<argument><name>RPropertyTypeId</name></argument>&gt;</argument_list></name></type> <name>getPropertyTypeIds</name><parameter_list>(<param><decl><type><name>const</name> <name><name>std</name>::<name>type_info</name></name>&amp;</type> <name>classInfo</name></decl></param>, <param><decl><type><name><name>RPropertyAttributes</name>::<name>Option</name></name></type> =<init> <expr><name><name>RPropertyAttributes</name>::<name>NoOptions</name></name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>static</name> <name>bool</name></type> <name>hasPropertyType</name><parameter_list>(<param><decl><type><name>const</name> <name><name>std</name>::<name>type_info</name></name>&amp;</type> <name>classInfo</name></decl></param>,
            <param><decl><type><name>RPropertyTypeId</name></type> <name>propertyTypeId</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getPropertyGroupTitle</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getPropertyTitle</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>getPropertyTypeId</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>groupTitle</name></decl></param>,
            <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>title</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>bool</name></type> <name>operator ==</name><parameter_list>(<param><decl><type><name>const</name> <name>RPropertyTypeId</name>&amp;</type> <name>other</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>operator !=</name><parameter_list>(<param><decl><type><name>const</name> <name>RPropertyTypeId</name>&amp;</type> <name>other</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>operator &lt;</name><parameter_list>(<param><decl><type><name>const</name> <name>RPropertyTypeId</name>&amp;</type> <name>other</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

</public><public>public:
    <decl_stmt><decl><type><name>const</name> <name>static</name> <name>long</name> <name>int</name></type> <name>INVALID_ID</name></decl>;</decl_stmt>
    <comment type="line">//const static QString blockAttributePrefix;</comment>

</public><private>private:
    <decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>RPropertyAttributes</name>::<name>Options</name></name></type> <name>options</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>customPropertyTitle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>customPropertyName</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>static</name> <name>long</name> <name>int</name></type> <name>counter</name></decl>;</decl_stmt>

    <comment type="line">// maps class ID to set of property IDs:</comment>
    <decl_stmt><decl><type><name>static</name> <name>QMap<argument_list>&lt;<argument><name>QString</name></argument>, <argument><name>QSet<argument_list>&lt;<argument><name>RPropertyTypeId</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>propertyTypeByObjectMap</name></decl>;</decl_stmt>

    <comment type="line">// maps class ID / option combinations to set of property IDs:</comment>
    <decl_stmt><decl><type><name>static</name> <name>QMap<argument_list>&lt;<argument><name>QPair<argument_list>&lt;<argument><name>QString</name></argument>, <argument><name><name>RPropertyAttributes</name>::<name>Option</name></name></argument>&gt;</argument_list></name></argument>, <argument><name>QSet<argument_list>&lt;<argument><name>RPropertyTypeId</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>propertyTypeByObjectOptionMap</name></decl>;</decl_stmt>

    <comment type="line">// maps property type IDs to group title / title:</comment>
    <decl_stmt><decl><type><name>static</name> <name>QMap<argument_list>&lt;<argument><name>long</name> <name>int</name></argument>, <argument><name>QPair<argument_list>&lt;<argument><name>QString</name></argument>, <argument><name>QString</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>idToTitleMap</name></decl>;</decl_stmt>

    <comment type="line">// maps group title / title to property ID:</comment>
    <decl_stmt><decl><type><name>static</name> <name>QMap<argument_list>&lt;<argument><name>QString</name></argument>, <argument><name>QMap<argument_list>&lt;<argument><name>QString</name></argument>, <argument><name>RPropertyTypeId</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>titleToIdMap</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>static</name> <name>QList<argument_list>&lt;<argument><name><name>RPropertyAttributes</name>::<name>Option</name></name></argument>&gt;</argument_list></name></type> <name>cachedOptionList</name></decl>;</decl_stmt>
</private>}</block>;</class>

<function_decl><type><name>QCADCORE_EXPORT</name> <name>QDebug</name></type> <name>operator&lt;&lt;</name><parameter_list>(<param><decl><type><name>QDebug</name></type> <name>dbg</name></decl></param>, <param><decl><type><name>const</name> <name>RPropertyTypeId</name>&amp;</type> <name>p</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>QCADCORE_EXPORT</name> <name>uint</name></type> <name>qHash</name><parameter_list>(<param><decl><type><name>const</name> <name>RPropertyTypeId</name>&amp;</type> <name>propertyTypeId</name></decl></param>)</parameter_list>;</function_decl>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RPropertyTypeId</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RPropertyTypeId*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>const RPropertyTypeId*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSet&lt;RPropertyTypeId&gt;</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QList&lt;RPropertyTypeId&gt;</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* RPROPERTYTYPEID_H_ */</comment>
</unit>
