<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core" filename="RUcs.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RUCS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RUCS_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RPropertyTypeId.h"</cpp:file></cpp:include>

<class_decl>class <name>RDocument</name>;</class_decl>


<comment type="block">/**
 * Represents a user coordinate system (UCS) in a drawing.
 * The current UCS of a drawing defines the current workplane
 * and coordinate system that is being used for all input.
 *
 * \ingroup core
 * \scriptable
 * \sharedPointerSupport
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RUcs</name> <super>: <specifier>public</specifier> <name>RObject</name></super> <block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyOriginX</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyOriginY</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyOriginZ</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyXAxisDirectionX</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyXAxisDirectionY</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyXAxisDirectionZ</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyYAxisDirectionX</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyYAxisDirectionY</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyYAxisDirectionZ</name></decl>;</decl_stmt>

</public><public>public:
    <constructor><name>RUcs</name><parameter_list>()</parameter_list> <member_list>: <call><name>RObject</name><argument_list>()</argument_list></call>, <call><name>origin</name><argument_list>(<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call>, <call><name>xAxisDirection</name><argument_list>(<argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call>, <call><name>yAxisDirection</name><argument_list>(<argument><expr>0</expr></argument>,<argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call> </member_list><block>{
    }</block></constructor>

    <constructor><name>RUcs</name><parameter_list>(
        <param><decl><type><name>RDocument</name>*</type> <name>document</name></decl></param>,
        <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>name</name></decl></param>,
        <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>origin</name></decl></param>,
        <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>xAxisDirection</name></decl></param>,
        <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>yAxisDirection</name></decl></param>
    )</parameter_list> <member_list>: <call><name>RObject</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call>,
        <call><name>name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>,
        <call><name>origin</name><argument_list>(<argument><expr><name>origin</name></expr></argument>)</argument_list></call>,
        <call><name>xAxisDirection</name><argument_list>(<argument><expr><name>xAxisDirection</name></expr></argument>)</argument_list></call>,
        <call><name>yAxisDirection</name><argument_list>(<argument><expr><name>yAxisDirection</name></expr></argument>)</argument_list></call> </member_list><block>{
   }</block></constructor>

    <destructor><specifier>virtual</specifier> <name>~RUcs</name><parameter_list>()</parameter_list> <block>{
    }</block></destructor>

    <function_decl><type><name>static</name> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><name>virtual</name> <name><name>RS</name>::<name>EntityType</name></name></type> <name>getType</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name><name>RS</name>::<name>ObjectUcs</name></name></expr>;</return>
    }</block></function>

    <function><type><name>virtual</name> <name>RUcs</name>*</type> <name>clone</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr>new <call><name>RUcs</name><argument_list>(<argument><expr>*<name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><type><name>virtual</name> <name>QPair<argument_list>&lt;<argument><name>QVariant</name></argument>, <argument><name>RPropertyAttributes</name></argument>&gt;</argument_list></name></type> <name>getProperty</name><parameter_list>(
            <param><decl><type><name>RPropertyTypeId</name>&amp;</type> <name>propertyTypeId</name></decl></param>,
            <param><decl><type><name>bool</name></type> <name>humanReadable</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>noAttributes</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>showOnRequest</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>RPropertyTypeId</name></type> <name>propertyTypeId</name></decl></param>,
            <param><decl><type><name>const</name> <name>QVariant</name>&amp;</type> <name>value</name></decl></param>, <param><decl><type><name>RTransaction</name>*</type> <name>transaction</name>=<init><expr><name>NULL</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function><type><name>void</name></type> <name>setOrigin</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>o</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>origin</name> = <name>o</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>setXAxisDirection</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>x</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>xAxisDirection</name> = <name>x</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>setYAxisDirection</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>y</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>yAxisDirection</name> = <name>y</name></expr>;</expr_stmt>
    }</block></function>

    <function_decl><type><name>RVector</name></type> <name>getZAxisDirection</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>RVector</name></type> <name>mapFromUcs</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>positionUcs</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>RVector</name></type> <name>mapToUcs</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>positionWcs</name></decl></param>)</parameter_list>;</function_decl>

</public><public>public:
    <decl_stmt><decl><type><name>QString</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RVector</name></type> <name>origin</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RVector</name></type> <name>xAxisDirection</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RVector</name></type> <name>yAxisDirection</name></decl>;</decl_stmt>
</public>}</block>;</class>

<function_decl><type><name>QCADCORE_EXPORT</name> <name>QDebug</name></type> <name>operator&lt;&lt;</name><parameter_list>(<param><decl><type><name>QDebug</name></type> <name>dbg</name></decl></param>, <param><decl><type><name>const</name> <name>RUcs</name>&amp;</type> <name>u</name></decl></param>)</parameter_list>;</function_decl>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RUcs</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RUcs*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;RUcs&gt;</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;RUcs&gt;*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
