<?xml version="1.0"?>
<unit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:rs="http://www.ribbonsoft.com">
  <class_decl name="QTextDocument" />
  <class name="RTextBasedData"
  xsi:noNamespaceSchemaLocation="../class.xsd" isCopyable="true"
  hasShell="false" sharedPointerSupport="true" isQObject="false"
  hasStreamOperator="true" isAbstract="false" isScriptable="true">
    <baseClass name="REntityData" specifier="public" />
    <baseClass name="RPainterPathSource" specifier="public" />
    <enum name="TextFlag">
      <value name="NoFlags" />
      <value name="Bold" />
      <value name="Italic" />
      <value name="Simple" />
      <value name="DimensionLabel" />
      <value name="Highlighted" />
      <value name="Backward" />
      <value name="UpsideDown" />
    </enum>
    <constructor>
      <variant>
        <arg type="RDocument *" typeName="RDocument *"
        name="document" hasDefault="true" default="NULL"
        isConst="false" />
      </variant>
      <variant>
        <arg type="RVector &amp;" typeName="RVector"
        name="position" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector"
        name="alignmentPoint" isConst="true" />
        <arg type="double" typeName="double" name="textHeight"
        isConst="false" />
        <arg type="double" typeName="double" name="textWidth"
        isConst="false" />
        <arg type="RS::VAlign" typeName="RS::VAlign"
        name="verticalAlignment" isConst="false" />
        <arg type="RS::HAlign" typeName="RS::HAlign"
        name="horizontalAlignment" isConst="false" />
        <arg type="RS::TextDrawingDirection"
        typeName="RS::TextDrawingDirection" name="drawingDirection"
        isConst="false" />
        <arg type="RS::TextLineSpacingStyle"
        typeName="RS::TextLineSpacingStyle" name="lineSpacingStyle"
        isConst="false" />
        <arg type="double" typeName="double"
        name="lineSpacingFactor" isConst="false" />
        <arg type="QString &amp;" typeName="QString" name="text"
        isConst="true" />
        <arg type="QString &amp;" typeName="QString"
        name="fontName" isConst="true" />
        <arg type="bool" typeName="bool" name="bold"
        isConst="false" />
        <arg type="bool" typeName="bool" name="italic"
        isConst="false" />
        <arg type="double" typeName="double" name="angle"
        isConst="false" />
        <arg type="bool" typeName="bool" name="simple"
        isConst="false" />
      </variant>
    </constructor>
    <method name="getType" cppName="getType" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="RS::EntityType" isPureVirtual="false" />
    </method>
    <method name="setFlag" cppName="setFlag" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RTextBasedData::TextFlag"
        typeName="RTextBasedData::TextFlag" name="flag"
        isConst="false" />
        <arg type="bool" typeName="bool" name="on"
        hasDefault="true" default="true" isConst="false" />
      </variant>
    </method>
    <method name="getFlag" cppName="getFlag" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RTextBasedData::TextFlag"
        typeName="RTextBasedData::TextFlag" name="flag"
        isConst="false" />
      </variant>
    </method>
    <method name="isValid" cppName="isValid" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="isSane" cppName="isSane" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="getBoundingBox" cppName="getBoundingBox"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RBox" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="ignoreEmpty"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="getWidth" cppName="getWidth" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="getHeight" cppName="getHeight" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="sync" cppName="sync" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RTextBasedData &amp;" typeName="RTextBasedData"
        name="other" isConst="true" />
      </variant>
    </method>
    <method name="getPointOnEntity" cppName="getPointOnEntity"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="getEndPoints" cppName="getEndPoints"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false">
        <arg type="RBox &amp;" typeName="RBox" name="queryBox"
        hasDefault="true" default="RDEFAULT_RBOX" isConst="true" />
      </variant>
    </method>
    <method name="getMiddlePoints" cppName="getMiddlePoints"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false">
        <arg type="RBox &amp;" typeName="RBox" name="queryBox"
        hasDefault="true" default="RDEFAULT_RBOX" isConst="true" />
      </variant>
    </method>
    <method name="getCenterPoints" cppName="getCenterPoints"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false">
        <arg type="RBox &amp;" typeName="RBox" name="queryBox"
        hasDefault="true" default="RDEFAULT_RBOX" isConst="true" />
      </variant>
    </method>
    <method name="getPointsWithDistanceToEnd"
    cppName="getPointsWithDistanceToEnd" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false">
        <arg type="double" typeName="double" name="distance"
        isConst="false" />
        <arg type="int" typeName="int" name="from"
        hasDefault="true" default="RS :: FromAny"
        isConst="false" />
        <arg type="RBox &amp;" typeName="RBox" name="queryBox"
        hasDefault="true" default="RDEFAULT_RBOX" isConst="true" />
      </variant>
    </method>
    <method name="getDistanceTo" cppName="getDistanceTo"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
        <arg type="bool" typeName="bool" name="limited"
        hasDefault="true" default="true" isConst="false" />
        <arg type="double" typeName="double" name="range"
        hasDefault="true" default="0.0" isConst="false" />
        <arg type="bool" typeName="bool" name="draft"
        hasDefault="true" default="false" isConst="false" />
        <arg type="double" typeName="double" name="strictRange"
        hasDefault="true" default="RMAXDOUBLE" isConst="false" />
      </variant>
    </method>
    <method name="intersectsWith" cppName="intersectsWith"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RShape &amp;" typeName="RShape" name="shape"
        isConst="true" />
      </variant>
    </method>
    <method name="getPosition" cppName="getPosition"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="setPosition" cppName="setPosition"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="position" isConst="true" />
      </variant>
    </method>
    <method name="getAlignmentPoint" cppName="getAlignmentPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="setAlignmentPoint" cppName="setAlignmentPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="alignmentPoint" isConst="true" />
      </variant>
    </method>
    <method name="setText" cppName="setText" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="QString &amp;" typeName="QString" name="text"
        isConst="true" />
      </variant>
    </method>
    <method name="getFontName" cppName="getFontName"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QString" isPureVirtual="false" />
    </method>
    <method name="setFontName" cppName="setFontName"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="QString &amp;" typeName="QString"
        name="fontName" isConst="true" />
      </variant>
    </method>
    <method name="getFontFile" cppName="getFontFile"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QString" isPureVirtual="false" />
    </method>
    <method name="setFontFile" cppName="setFontFile"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="QString &amp;" typeName="QString"
        name="fontFile" isConst="true" />
      </variant>
    </method>
    <method name="isBold" cppName="isBold" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setBold" cppName="setBold" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="isItalic" cppName="isItalic" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setItalic" cppName="setItalic" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="getTextHeight" cppName="getTextHeight"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setTextHeight" cppName="setTextHeight"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="h"
        isConst="false" />
      </variant>
    </method>
    <method name="getTextWidth" cppName="getTextWidth"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setTextWidth" cppName="setTextWidth"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="w"
        isConst="false" />
      </variant>
    </method>
    <method name="setVAlign" cppName="setVAlign" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RS::VAlign" typeName="RS::VAlign" name="valign"
        isConst="false" />
      </variant>
    </method>
    <method name="getVAlign" cppName="getVAlign" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="RS::VAlign" isPureVirtual="false" />
    </method>
    <method name="setHAlign" cppName="setHAlign" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RS::HAlign" typeName="RS::HAlign" name="halign"
        isConst="false" />
      </variant>
    </method>
    <method name="getHAlign" cppName="getHAlign" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="RS::HAlign" isPureVirtual="false" />
    </method>
    <method name="setDrawingDirection"
    cppName="setDrawingDirection" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RS::TextDrawingDirection"
        typeName="RS::TextDrawingDirection" name="drawingDirection"
        isConst="false" />
      </variant>
    </method>
    <method name="getDrawingDirection"
    cppName="getDrawingDirection" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="RS::TextDrawingDirection"
      isPureVirtual="false" />
    </method>
    <method name="setLineSpacingStyle"
    cppName="setLineSpacingStyle" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RS::TextLineSpacingStyle"
        typeName="RS::TextLineSpacingStyle" name="lineSpacingStyle"
        isConst="false" />
      </variant>
    </method>
    <method name="getLineSpacingStyle"
    cppName="getLineSpacingStyle" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="RS::TextLineSpacingStyle"
      isPureVirtual="false" />
    </method>
    <method name="setLineSpacingFactor"
    cppName="setLineSpacingFactor" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double"
        name="lineSpacingFactor" isConst="false" />
      </variant>
    </method>
    <method name="getLineSpacingFactor"
    cppName="getLineSpacingFactor" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setAngle" cppName="setAngle" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="angle"
        isConst="false" />
      </variant>
    </method>
    <method name="getAngle" cppName="getAngle" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setXScale" cppName="setXScale" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="xScale"
        isConst="false" />
      </variant>
    </method>
    <method name="getXScale" cppName="getXScale" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setSimple" cppName="setSimple" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="isSimple" cppName="isSimple" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setBackward" cppName="setBackward"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="isBackward" cppName="isBackward"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setUpsideDown" cppName="setUpsideDown"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="isUpsideDown" cppName="isUpsideDown"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setDimensionLabel" cppName="setDimensionLabel"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="isDimensionLabel" cppName="isDimensionLabel"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setSelected" cppName="setSelected"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="setHighlighted" cppName="setHighlighted"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="isHighlighted" cppName="isHighlighted"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="getReferencePoints" cppName="getReferencePoints"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RRefPoint &gt;"
      isPureVirtual="false">
        <arg type="RS::ProjectionRenderingHint"
        typeName="RS::ProjectionRenderingHint" name="hint"
        hasDefault="true" default="RS :: RenderTop"
        isConst="false" />
      </variant>
    </method>
    <method name="moveReferencePoint" cppName="moveReferencePoint"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="referencePoint" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector"
        name="targetPoint" isConst="true" />
        <arg type="Qt::KeyboardModifiers"
        typeName="Qt::KeyboardModifiers" name="modifiers"
        hasDefault="true" default="Qt :: NoModifier"
        isConst="false" />
      </variant>
    </method>
    <method name="move" cppName="move" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="offset"
        isConst="true" />
      </variant>
    </method>
    <method name="rotate" cppName="rotate" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="double" typeName="double" name="rotation"
        isConst="false" />
        <arg type="RVector &amp;" typeName="RVector" name="center"
        isConst="true" />
      </variant>
    </method>
    <method name="scale" cppName="scale" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="scaleFactors" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector" name="center"
        isConst="true" />
      </variant>
    </method>
    <method name="mirror" cppName="mirror" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RLine &amp;" typeName="RLine" name="axis"
        isConst="true" />
      </variant>
    </method>
    <method name="flipHorizontal" cppName="flipHorizontal"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="flipVertical" cppName="flipVertical"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="getText" cppName="getText" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QString" isPureVirtual="false" />
    </method>
    <method name="getRenderedText" cppName="getRenderedText"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QString" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="escapeUnicode"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="getPlainText" cppName="getPlainText"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QString" isPureVirtual="false" />
    </method>
    <method name="getEscapedText" cppName="getEscapedText"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QString" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="escapeUnicode"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="escapeUnicode" cppName="escapeUnicode"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QString" isPureVirtual="false">
        <arg type="QString &amp;" typeName="QString" name="str"
        isConst="true" />
      </variant>
    </method>
    <method name="getMainFont" cppName="getMainFont"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QFont" isPureVirtual="false" />
    </method>
    <method name="update" cppName="update" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="layout"
        isConst="false" />
      </variant>
    </method>
    <method name="isDirty" cppName="isDirty" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="getPainterPaths" cppName="getPainterPaths"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RPainterPath &gt;"
      isPureVirtual="false">
        <arg type="bool" typeName="bool" name="draft"
        hasDefault="true" default="false" isConst="false" />
        <arg type="double" typeName="double" name="pixelSizeHint"
        hasDefault="true" default="RDEFAULT_MIN1"
        isConst="false" />
      </variant>
    </method>
    <method name="getShapes" cppName="getShapes" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; QSharedPointer &lt; RShape &gt; &gt;"
      isPureVirtual="false">
        <arg type="RBox &amp;" typeName="RBox" name="queryBox"
        hasDefault="true" default="RDEFAULT_RBOX" isConst="true" />
        <arg type="bool" typeName="bool" name="ignoreComplex"
        hasDefault="true" default="false" isConst="false" />
        <arg type="bool" typeName="bool" name="segment"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="getExploded" cppName="getExploded"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; QSharedPointer &lt; RShape &gt; &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getClosestShape" cppName="getClosestShape"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QSharedPointer &lt; RShape &gt;"
      isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="pos"
        isConst="true" />
        <arg type="double" typeName="double" name="range"
        hasDefault="true" default="RNANDOUBLE" isConst="false" />
        <arg type="bool" typeName="bool" name="ignoreComplex"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="getClosestPointOnEntity"
    cppName="getClosestPointOnEntity" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
        <arg type="double" typeName="double" name="range"
        isConst="false" />
        <arg type="bool" typeName="bool" name="limited"
        isConst="false" />
      </variant>
    </method>
    <method name="getTextLayouts" cppName="getTextLayouts"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RTextLayout &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getSimpleTextBlocks"
    cppName="getSimpleTextBlocks" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="QList &lt; RTextBasedData &gt;"
      isPureVirtual="false" />
    </method>
    <method name="hasProxy" cppName="hasProxy" specifier="public"
    isStatic="true" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="toEscapedText" cppName="toEscapedText"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QString" isPureVirtual="false">
        <arg type="QTextDocument &amp;" typeName="QTextDocument"
        name="textDocument" isConst="true" />
        <arg type="RColor &amp;" typeName="RColor"
        name="initialColor" isConst="true" />
        <arg type="double" typeName="double"
        name="fontHeightFactor" hasDefault="true" default="1.0"
        isConst="false" />
        <arg type="bool" typeName="bool" name="simpleText"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="toRichText" cppName="toRichText"
    specifier="public" isStatic="true" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QString" isPureVirtual="false">
        <arg type="QString &amp;" typeName="QString"
        name="escapedText" isConst="true" />
        <arg type="QFont &amp;" typeName="QFont" name="mainFont"
        isConst="true" />
        <arg type="double" typeName="double"
        name="fontHeightFactor" hasDefault="true" default="1.0"
        isConst="false" />
      </variant>
    </method>
  </class>
</unit>
